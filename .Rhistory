# p1: Histogramm "Monate Letzte Spende"
#    - Rot = Test, Blau = Train
#    - Legende links (legend.position="left")
#    - y="Frequenz"
p1 <- ggplot(combined_data, aes(x=`Monate Letzte Spende`, fill=Dataset)) +
geom_histogram(binwidth=1, position="dodge", color="black") +
scale_fill_manual(values=c("Test"="red","Train"="blue")) +
labs(
title="Monate Letzte Spende",
x="Monate",
y="Frequenz"
) +
theme_minimal() +
theme(legend.position="left")
# p2: Histogramm "Anzahl Spenden"
#    - KEINE Legende, KEINE Y-Achsenbeschriftung
p2 <- ggplot(combined_data, aes(x=`Anzahl Spenden`, fill=Dataset)) +
geom_histogram(binwidth=1, position="dodge", color="black") +
scale_fill_manual(values=c("Test"="red","Train"="blue")) +
labs(
title="Anzahl Spenden",
x="Anzahl",
y=NULL
) +
theme_minimal() +
theme(legend.position="none")
# p3: Histogramm "Gesamtvolumen"
#    - KEINE Legende, KEINE Y-Achsenbeschriftung
p3 <- ggplot(combined_data, aes(x=Gesamtvolumen, fill=Dataset)) +
geom_histogram(binwidth=500, position="dodge", color="black") +
scale_fill_manual(values=c("Test"="red","Train"="blue")) +
labs(
title="Gesamtvolumen",
x="Volumen",
y=NULL
) +
theme_minimal() +
theme(legend.position="none")
# p4: Histogramm "Monate Erste Spende"
#    - KEINE Legende, KEINE Y-Achsenbeschriftung
p4 <- ggplot(combined_data, aes(x=`Monate Erste Spende`, fill=Dataset)) +
geom_histogram(binwidth=5, position="dodge", color="black") +
scale_fill_manual(values=c("Test"="red","Train"="blue")) +
labs(
title="Monate Erste Spende",
x="Monate",
y=NULL
) +
theme_minimal() +
theme(legend.position="none")
###############################################################################
## KAPITEL 3: BALKENDIAGRAMM p5 (unten links)
###############################################################################
# p5: Balkendiagramm für "Spende Maerz 2007" im Trainingsdatensatz
#    - Nur blau (Train)
#    - Keine Legende
p5 <- ggplot(train_data, aes(x=factor(`Spende Maerz 2007`), fill="Train")) +
geom_bar(color="black") +
scale_fill_manual(values=c("Train"="blue")) +
scale_x_discrete(labels=c("0"="nein","1"="ja")) +
labs(
title="Klassenverteilung (Spende im März 2007, Trainingsdaten)",
x="Klasse",
y="Anzahl"
) +
theme_minimal() +
theme(legend.position="none")
###############################################################################
## KAPITEL 4: KOMMENTARBOX RECHTS (Erkenntnisse und Schlussfolgerung)
###############################################################################
# "comment_bg": halb-transparentes weißes Rechteck
comment_bg <- rectGrob(
gp=gpar(fill=rgb(1,1,1,0.15), col="white")
)
# "comment_text": grüner Text mit Bullet-Points
comment_text <- textGrob(
"Erkenntnisse\n• Monate Letzte Spende: Verteilungen weitgehend ähnlich\n• Anzahl Spenden: Im Testdatensatz weniger hohe Spenderzahlen\n• Gesamtvolumen: tendenziell kleinere Werte im Test\n• Monate Erste Spende: evtl. andere Historie\n\nSchlussfolgerung\n- Möglicherweise leichte Stichprobendifferenz\n- Modell sollte train/test-Shift abfedern können",
x=0.02, y=0.98, just=c("left","top"),
gp=gpar(col="black", fontsize=14)
)
comment_panel <- grobTree(comment_bg, comment_text)
###############################################################################
## KAPITEL 5: TITEL-PANEL OBEN
###############################################################################
title_grob <- textGrob(
"Vergleich Verteilungen Trainings- und Testdaten",
gp = gpar(fontsize=32, col="white", fontface="bold")
)
title_bg   <- rectGrob(gp=gpar(fill="#7F3FBF", col=NA))
title_panel <- grobTree(title_bg, title_grob)
###############################################################################
## KAPITEL 6: ZUSAMMENSETZEN DES GESAMT-PLOTS MIT grid.arrange
###############################################################################
grid.arrange(
# Reihenfolge der Panels:
#  1) = title_panel
#  2) = p1 (mit Legende & y=Frequenz)
#  3) = p2
#  4) = p3
#  5) = p4
#  6) = p5 (Balkendiagramm)
#  7) = comment_panel (Box)
title_panel,
p1,
p2,
p3,
p4,
p5,
comment_panel,
# Layout: 3 Zeilen, 4 Spalten
layout_matrix = rbind(
c(1,1,1,1),   # Zeile 1 => Titel
c(2,3,4,5),   # Zeile 2 => 4 Histogramme
c(6,6,7,7)    # Zeile 3 => p5 links, Kommentar rechts
),
nrow=3,
heights=c(0.8, 3, 1.5)
)
#################################################################################
# Folie 6: Pairsplot + Korrelationsmatrix ----
##############################################################################
## GESAMTE FOLIE "Trainingsdaten – Beziehung der Variablen" (Screenshot 2)
##
##  Layout: 3 Zeilen × 2 Spalten
##    Zeile 1 (Panel1,1 => breiter Titel-Balken)
##    Zeile 2 => Pairs-Plot (links) & Korrelationsmatrix (rechts)
##    Zeile 3 => Box "Erkenntnisse..." (links) & Box "Neuer Prädiktor" (rechts)
##############################################################################
#### 1) Pakete + Daten einlesen ####
# Falls noch nicht installiert: install.packages("corrplot")
library(corrplot)
train_data <- read.csv("bloodtrain.csv", stringsAsFactors = FALSE)
colnames(train_data) <- c(
"ID",
"Monate Letzte Spende",
"Anzahl Spenden",
"Gesamtvolumen",
"Monate Erste Spende",
"Spende Maerz 2007"
)
# 0 in "Monate Letzte Spende" => NA
z_rows <- train_data$`Monate Letzte Spende` == 0
if(any(z_rows, na.rm=TRUE)){
train_data$`Monate Letzte Spende`[z_rows] <- NA
}
# Neuer Prädiktor "Spendetakt"
train_data$Spendetakt <- with(train_data, `Anzahl Spenden` / `Monate Letzte Spende`)
# Farbgebung: 1 => grün, 0 => rot
point_colors <- ifelse(train_data$`Spende Maerz 2007` == 1, "green", "red")
# Korrelationsmatrix (nur numerische Variablen, ID entfernen)
num_data <- train_data[sapply(train_data, is.numeric)]
if("ID" %in% names(num_data)){
num_data <- num_data[, !names(num_data) %in% "ID"]
}
cor_matrix <- cor(num_data, use="pairwise.complete.obs")
##############################################################################
#### 2) layout(...) für das gesamte "Folie"-Layout
##############################################################################
layout(
matrix(c(
1,1,   # Zeile 1 => Panel1 breit (Titel)
2,3,   # Zeile 2 => Panel2 (links), Panel3 (rechts)
4,5    # Zeile 3 => Panel4 (links), Panel5 (rechts)
), nrow=3, byrow=TRUE),
widths  = c(1,1),
heights = c(1.2, 4, 2.5)
)
#### Globale par-Einstellungen für ALLE Panels ####
par(
bg       = "#7F3FBF",  # Violetter "Folie"-Hintergrund
fg       = "black",
col.lab  = "black",
col.axis = "black"
)
##############################################################################
#### PANEL 1: Titelbalken (Zeile1, Spalten1+2)
##############################################################################
par(mar=c(0,0,0,0))  # minimaler Rand
plot.new()
usr <- par("usr")
# Weißer Rahmen um den Balken:
rect(
usr[1], usr[3], usr[2], usr[4],
col=NA, border="white", lwd=3
)
text(
x=0.5, y=0.5,
labels="Trainingsdaten – Beziehung der Variablen",
col="white", font=2, cex=2.5
)
##############################################################################
#### PANEL 2: Pairs-Plot (Zeile2, Spalte1)
##############################################################################
par(mar=c(4,4,3,1))
pairs(
train_data[, c("Monate Letzte Spende","Anzahl Spenden","Gesamtvolumen","Monate Erste Spende","Spendetakt")],
col        = ifelse(train_data$`Spende Maerz 2007`==1, "green","red"),
main       = "Pairs-Plot Trainingsdaten",
font.main  = 2,
cex.main   = 1.4,
height     = 1.5,
width      = 1.5,
)
##############################################################################
#### PANEL 3: Korrelation (Zeile2, Spalte2)
##############################################################################
par(mar=c(4,2,3,2))
corrplot(
cor_matrix,
method      = "color",
type        = "upper",
tl.col      = "black",
tl.srt      = 45,
addCoef.col = "black",
number.cex  = 0.9,
title       = "Korrelationsmatrix (mit Spendetakt)",
mar         = c(0,0,2,0),
cex.main    = 1.4,
font.main   = 2
)
##############################################################################
#### PANEL 4: Box "Erkenntnisse & Schlussfolgerung" (Zeile3, Spalte1)
##############################################################################
par(mar=c(0,0,0,0))
plot.new()
usr <- par("usr")
# halbtransparentes weißes Rechteck
rect(
usr[1], usr[3], usr[2], usr[4],
col=rgb(1,1,1,0.15), border="white", lwd=2
)
# Titel "Erkenntnisse"
text(
x=0.02, y=0.85, adj=c(0,1),
labels="Erkenntnisse",
col="white", font=2, cex=1.6
)
txt_erk <- paste(
"• 'Anzahl Spenden' und 'Gesamtvolumen' haben Korrelation 1",
"• Korrelation neuer Prädiktor 'Spendetakt' hoch zu 'Anzahl Spenden' & 'Gesamtvolumen'",
sep="\n"
)
text(
x=0.02, y=0.7, adj=c(0,1),
labels=txt_erk,
col="white", cex=1.2
)
# Titel "Schlussfolgerung"
text(
x=0.02, y=0.3, adj=c(0,1),
labels="Schlussfolgerung",
col="white", font=2, cex=1.6
)
text(
x=0.02, y=0.15, adj=c(0,1),
labels="• 'Anzahl Spenden' beibehalten und 'Gesamtvolumen' weglassen",
col="white", cex=1.2
)
##############################################################################
#### PANEL 5: Box "Neuer Prädiktor" (Zeile3, Spalte2)
##############################################################################
par(mar=c(0,0,0,0))
plot.new()
usr <- par("usr")
rect(
usr[1], usr[3], usr[2], usr[4],
col=rgb(1,1,1,0.15), border="white", lwd=2
)
text(
x=0.02, y=0.85, adj=c(0,1),
labels="Neuer Prädiktor 'Spendetakt'",
col="white", font=2, cex=1.4
)
text(
x=0.02, y=0.65, adj=c(0,1),
labels="= 'Anzahl Spenden' / 'Monate Letzte Spende'",
col="white", cex=1.2
)
# FERTIG
##############################################################################
##############################################################################
# 3.3) PAIRS-PLOT & KORRELATIONSMATRIX NEBENEINANDER (OHNE VERZERRUNG)
# ----------------------------------------------------------------------------
# Ziel:
#   - Wie bisher: Leerzeichen in den Spaltennamen (z.B. "Monate Letzte Spende").
#   - Neuer Praediktor "Spendetakt" = (Anzahl Spenden) / (Monate Letzte Spende).
#   - 0 in "Monate Letzte Spende" => NA setzen, um Division durch 0 zu vermeiden.
#   - Links: Pairs-Plot, rechts: Korrelationsmatrix, gemeinsam in einem Plot
#     nebeneinander, ohne dass die Korrelationsmatrix verzerrt wird.
##############################################################################
# 1) DATENSATZ EINLESEN UND VORBEREITEN
# ----------------------------------------------------------------------------
train_data <- read.csv("bloodtrain.csv", stringsAsFactors = FALSE)
# Spaltennamen wie in den vorherigen Plots
colnames(train_data) <- c(
"ID",
"Monate Letzte Spende",
"Anzahl Spenden",
"Gesamtvolumen",
"Monate Erste Spende",
"Spende Maerz 2007"
)
# 2) 0 -> NA in "Monate Letzte Spende"
# ----------------------------------------------------------------------------
# Prüfen, ob es überhaupt Werte == 0 gibt
has_zero <- any(train_data$`Monate Letzte Spende` == 0, na.rm = TRUE)
if (has_zero) {
train_data$`Monate Letzte Spende`[
train_data$`Monate Letzte Spende` == 0
] <- NA
}
# 3) NEUER PRAEDIKTOR "SPENDETAKT"
# ----------------------------------------------------------------------------
# Spendetakt = (Anzahl Spenden) / (Monate Letzte Spende)
train_data$Spendetakt <- train_data$`Anzahl Spenden` /
train_data$`Monate Letzte Spende`
# 4) KORRELATIONSMATRIX BERECHNEN
# ----------------------------------------------------------------------------
library(corrplot)  # Falls nicht installiert: install.packages("corrplot")
num_data <- train_data[sapply(train_data, is.numeric)]
# "ID" entfernen, falls vorhanden und unnoetig
if ("ID" %in% names(num_data)) {
num_data <- num_data[, !names(num_data) %in% "ID"]
}
# Korrelation mit pairwise.complete.obs
cor_matrix <- cor(num_data, use = "pairwise.complete.obs")
# 5) PAKETE FÜR BASE-PLOT-KOMBINATION LADEN
# ----------------------------------------------------------------------------
library(gridGraphics)  # Um Base-Plots in Grid-Objekte zu verwandeln
library(gridExtra)     # Um Grid-Objekte nebeneinander anzuordnen
library(grid)          # Fuer grid.newpage(), viewport(), etc.
# 6) PAIRS-PLOT-FUNKTION DEFINIEREN
# ----------------------------------------------------------------------------
numeric_vars <- c(
"Monate Letzte Spende",
"Anzahl Spenden",
"Gesamtvolumen",
"Monate Erste Spende",
"Spendetakt"
)
# Farbgebung: 1 => grün, 0 => rot
point_colors <- ifelse(train_data$`Spende Maerz 2007` == 1, "green", "red")
plot_pairs <- function() {
pairs(
train_data[, numeric_vars],
col       = point_colors,
pch       = 16,       # Geschlossene Kreise
cex       = 1.2,      # Punktgroesse
font.main = 2,        # Fettschrift fuer Titel
font.lab  = 2,
main      = "Pairs-Plot der Trainingsdaten",
cex.main  = 1.4,
cex.labels= 1.2
)
}
# 7) KORRELATIONSMATRIX-FUNKTION DEFINIEREN (PTY = "S" ERZWINGT QUADRAT)
# ----------------------------------------------------------------------------
plot_corr <- function() {
par(pty = "s")  # Quadratisches Plotfenster erzwingen
corrplot(
cor_matrix,
method      = "color",   # Farbkacheln
type        = "upper",   # Nur obere Haelfte
tl.col      = "black",
tl.srt      = 45,
addCoef.col = "black",   # Zahlen in Schwarz
number.cex  = 0.8,
title       = "Korrelationsmatrix (mit Spendetakt)",
mar         = c(0, 0, 2, 0),
cex.main    = 1.4,
font.main   = 2
)
}
# 8) PAIRS-PLOT ALS GROB ERFASSEN
# ----------------------------------------------------------------------------
grid.newpage()       # Neue Grafikseite
grid.echo(plot_pairs)
pairs_grob <- grid.grab()
# 9) KORRELATIONSMATRIX ALS GROB ERFASSEN
# ----------------------------------------------------------------------------
grid.newpage()       # Neue Grafikseite
grid.echo(plot_corr)
corr_grob <- grid.grab()
# 10) BEIDE GRAFIKEN NEBENEINANDER ANORDNEN (BREITENVERHAELTNIS STEUERN)
# ----------------------------------------------------------------------------
grid.newpage()  # Neue Grafikseite fuer das finale Layout
# widths = c(3, 2) => erster Plot 3 Teile, zweiter Plot 2 Teile
# Falls die Korrelationsmatrix mehr Platz benoetigt, einfach z.B. (2,3) setzen
grid.arrange(
pairs_grob,
corr_grob,
ncol   = 2,
widths = c(3, 2)
)
# FERTIG: LINKS DER PAIRS-PLOT, RECHTS DIE KORRELATIONSMATRIX
#         OHNE VERZERRUNG, NEBENEINANDER IN EINEM EINZIGEN PLOT.
##############################################################################
# 3.3) PAIRS-PLOT & KORRELATIONSMATRIX NEBENEINANDER (OHNE VERZERRUNG)
# ----------------------------------------------------------------------------
# Ziel:
#   - Wie bisher: Leerzeichen in den Spaltennamen (z.B. "Monate Letzte Spende").
#   - Neuer Praediktor "Spendetakt" = (Anzahl Spenden) / (Monate Letzte Spende).
#   - 0 in "Monate Letzte Spende" => NA setzen, um Division durch 0 zu vermeiden.
#   - Links: Pairs-Plot, rechts: Korrelationsmatrix, gemeinsam in einem Plot
#     nebeneinander, ohne dass die Korrelationsmatrix verzerrt wird.
##############################################################################
# 1) DATENSATZ EINLESEN UND VORBEREITEN
# ----------------------------------------------------------------------------
train_data <- read.csv("bloodtrain.csv", stringsAsFactors = FALSE)
# Spaltennamen wie in den vorherigen Plots
colnames(train_data) <- c(
"ID",
"Monate Letzte Spende",
"Anzahl Spenden",
"Gesamtvolumen",
"Monate Erste Spende",
"Spende Maerz 2007"
)
# 2) 0 -> NA in "Monate Letzte Spende"
# ----------------------------------------------------------------------------
# Prüfen, ob es überhaupt Werte == 0 gibt
has_zero <- any(train_data$`Monate Letzte Spende` == 0, na.rm = TRUE)
if (has_zero) {
train_data$`Monate Letzte Spende`[
train_data$`Monate Letzte Spende` == 0
] <- NA
}
# 3) NEUER PRAEDIKTOR "SPENDETAKT"
# ----------------------------------------------------------------------------
# Spendetakt = (Anzahl Spenden) / (Monate Letzte Spende)
train_data$Spendetakt <- train_data$`Anzahl Spenden` /
train_data$`Monate Letzte Spende`
# 4) KORRELATIONSMATRIX BERECHNEN
# ----------------------------------------------------------------------------
library(corrplot)  # Falls nicht installiert: install.packages("corrplot")
num_data <- train_data[sapply(train_data, is.numeric)]
# "ID" entfernen, falls vorhanden und unnoetig
if ("ID" %in% names(num_data)) {
num_data <- num_data[, !names(num_data) %in% "ID"]
}
# Korrelation mit pairwise.complete.obs
cor_matrix <- cor(num_data, use = "pairwise.complete.obs")
# 5) PAKETE FÜR BASE-PLOT-KOMBINATION LADEN
# ----------------------------------------------------------------------------
library(gridGraphics)  # Um Base-Plots in Grid-Objekte zu verwandeln
library(gridExtra)     # Um Grid-Objekte nebeneinander anzuordnen
library(grid)          # Fuer grid.newpage(), viewport(), etc.
# 6) PAIRS-PLOT-FUNKTION DEFINIEREN
# ----------------------------------------------------------------------------
numeric_vars <- c(
"Monate Letzte Spende",
"Anzahl Spenden",
"Gesamtvolumen",
"Monate Erste Spende",
"Spendetakt"
)
# Farbgebung: 1 => grün, 0 => rot
point_colors <- ifelse(train_data$`Spende Maerz 2007` == 1, "green", "red")
plot_pairs <- function() {
pairs(
train_data[, numeric_vars],
col       = point_colors,
pch       = 16,       # Geschlossene Kreise
cex       = 1.2,      # Punktgroesse
font.main = 2,        # Fettschrift fuer Titel
font.lab  = 2,
main      = "Pairs-Plot der Trainingsdaten",
cex.main  = 1.4,
cex.labels= 1.2
)
}
# 7) KORRELATIONSMATRIX-FUNKTION DEFINIEREN (PTY = "S" ERZWINGT QUADRAT)
# ----------------------------------------------------------------------------
plot_corr <- function() {
par(pty = "s")  # Quadratisches Plotfenster erzwingen
corrplot(
cor_matrix,
method      = "color",   # Farbkacheln
type        = "upper",   # Nur obere Haelfte
tl.col      = "black",
tl.srt      = 45,
addCoef.col = "black",   # Zahlen in Schwarz
number.cex  = 0.8,
title       = "Korrelationsmatrix (mit Spendetakt)",
mar         = c(0, 0, 2, 0),
cex.main    = 1.4,
font.main   = 2
)
}
# 8) PAIRS-PLOT ALS GROB ERFASSEN
# ----------------------------------------------------------------------------
grid.newpage()       # Neue Grafikseite
grid.echo(plot_pairs)
pairs_grob <- grid.grab()
# 9) KORRELATIONSMATRIX ALS GROB ERFASSEN
# ----------------------------------------------------------------------------
grid.newpage()       # Neue Grafikseite
grid.echo(plot_corr)
corr_grob <- grid.grab()
# 10) BEIDE GRAFIKEN NEBENEINANDER ANORDNEN (BREITENVERHAELTNIS STEUERN)
# ----------------------------------------------------------------------------
grid.newpage()  # Neue Grafikseite fuer das finale Layout
# widths = c(3, 2) => erster Plot 3 Teile, zweiter Plot 2 Teile
# Falls die Korrelationsmatrix mehr Platz benoetigt, einfach z.B. (2,3) setzen
grid.arrange(
pairs_grob,
corr_grob,
ncol   = 2,
widths = c(3, 2)
)
# FERTIG: LINKS DER PAIRS-PLOT, RECHTS DIE KORRELATIONSMATRIX
#         OHNE VERZERRUNG, NEBENEINANDER IN EINEM EINZIGEN PLOT.
