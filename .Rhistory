# Folie 2
tags$div(class = "slide slide2",
tags$h1("Folie 2: Workflow Diagramm"),
tags$img(
src = here::here("Folie2.png"),
style = "max-width: 100%; height: auto;"
),
tags$a(
href     = here::here("Workflow.pdf"),
download = NA,
class    = "download-link",
"Workflow (PDF Download)"
)
),
# Folie 3
tags$div(class = "slide slide3",
tags$h1("Folie 3: ..."),
tags$p("Hier könnte ein weiterer Inhalt stehen.")
),
# Folie 4
tags$div(class = "slide slide4",
tags$h1("Folie 4: Statistische Kennzahlen"),
tags$h2("Trainingsdaten Zusammenfassung"),
tags$p("Mit 'summary' gewinnen wir einen statistischen Überblick."),
tags$div(
class = "summary-block",
tags$pre(paste(train_sum, collapse = "\n"))
),
tags$h2("Testdaten Zusammenfassung"),
tags$p("Auch die Testdaten werden zusammengefasst."),
tags$div(
class = "summary-block",
tags$pre(paste(test_sum, collapse = "\n"))
)
),
# Folie 5
tags$div(class = "slide slide5",
tags$h1("Folie 5: ..."),
tags$p("Noch ein Platzhalter für weiteren Inhalt.")
),
# Folie 6
tags$div(class = "slide slide6",
tags$h1("Folie 6: Vergleich der Trainings- und Testdaten"),
tags$img(
src   = img_b64,
style = "max-width: 100%; height: auto;"
),
tags$div(
class = "violett-box",
tags$strong("Erkenntnisse:"),
tags$ul(
tags$li("Verteilungen der Variablen sind nicht sehr unterschiedlich (Train vs. Test)."),
tags$li("Kerben der Boxen überlappen => Variabilität im Testdatensatz teils geringer.")
),
tags$br(),
tags$strong("Schlussfolgerung:"),
tags$p("Train- und Testdaten sind Stichproben aus derselben Population.")
)
),
# Folie 7
tags$div(class = "slide slide7",
tags$h1("Folie 7: Vergleich der Verteilungen Test vs. Train"),
tags$img(
src = here::here("Folie7_Vergleich_Train_Test.png"),
style = "max-width: 100%; height: auto;"
),
tags$div(
class = "violett-box",
tags$strong("Erkenntnisse:"),
tags$ul(
tags$li("Trainings- und Testdaten haben ähnliche Verteilungen."),
tags$li("Leichte Unterschiede in der Anzahl Spenden im Testset."),
tags$li("Gesamtvolumen im Testset etwas niedriger.")
),
tags$br(),
tags$strong("Schlussfolgerung:"),
tags$p("Die Unterschiede könnten die Modellleistung beeinflussen.")
)
),
# Folie 8
tags$div(class = "slide slide8",
tags$h1("Folie 8: Weiterer Inhalt"),
tags$p("Noch mehr Platzhalter...")
),
# Folie 9
tags$div(class = "slide slide9",
tags$h1("Folie 9: Weiterer Inhalt"),
tags$p("Noch mehr Platzhalter...")
),
# Folie 10
tags$div(class = "slide slide10",
tags$h1("Folie 10: Weiterer Inhalt"),
tags$p("Noch mehr Platzhalter...")
)
)
)
##############################################################################
# KAPITEL F) HTML-Seite anzeigen
##############################################################################
# Beschreibung:
#  - html_print(page) zeigt die erzeugte HTML-Seite sofort in RStudio/Browser an
##############################################################################
html_print(page)
##############################################################################
# KAPITEL 0) PDF -> PNG (Folie 1 und Folie 2 erzeugen)
##############################################################################
# Beschreibung:
#  - Wandelt "Titelseite.pdf" (Seite 1) in "Folie1.png" um
#  - Wandelt "Workflow.pdf" (Seite 1) in "Folie2.png" um
#
# Benötigtes Paket "pdftools" ggf. installieren: install.packages("pdftools")
##############################################################################
# --- 0.0) Pakete laden ------------------------------------------------------
library(pdftools)
library(here)
# --- 0.1) Folie 1 (Titelseite) ---------------------------------------------
pdf_convert(
pdf       = here::here("Titelseite.pdf"),  # Pfad zur PDF (mind. 1 Seite)
pages     = 1,                             # Seite 1
filenames = here::here("Folie1.png"),      # Ziel-Dateiname
dpi       = 300
)
# --- 0.2) Folie 2 (Workflow) -----------------------------------------------
# Falls "Workflow.pdf" nur 1 Seite hat, verwende pages = 1
pdf_convert(
pdf       = here::here("Workflow.pdf"),    # Pfad zur PDF
pages     = 1,                             # Seite 1
filenames = here::here("Folie2.png"),      # Ziel-Dateiname
dpi       = 300
)
##############################################################################
# KAPITEL A) Daten laden & Spalten umbenennen
##############################################################################
# Beschreibung:
#  - Lädt Trainings- und Testdaten
#  - Passt die Spaltennamen an (z.B. für schönere Darstellungen in Plots)
##############################################################################
# --- A.0) Pakete laden ------------------------------------------------------
library(here)
# --- A.1) CSV-Daten einlesen -----------------------------------------------
train_data <- read.csv(here::here("bloodtrain.csv"))
test_data  <- read.csv(here::here("bloodtest.csv"))
# --- A.2) Spaltennamen anpassen (Train) -------------------------------------
colnames(train_data) <- c(
"ID",
"Monate Letzte Spende",
"Anzahl Spenden",
"Gesamtvolumen",
"Monate Erste Spende",
"Spende Maerz 2007"
)
# --- A.3) Spaltennamen anpassen (Test) --------------------------------------
colnames(test_data) <- c(
"ID",
"Monate Letzte Spende",
"Anzahl Spenden",
"Gesamtvolumen",
"Monate Erste Spende"
)
##############################################################################
# KAPITEL B) Summary-Text einfangen (Folie 4)
##############################################################################
# Beschreibung:
#  - Erzeugt die Konsolenausgabe von summary() für Trainings- und Testdaten
#  - Speichert diese Texte in R-Objekten train_sum und test_sum
##############################################################################
# --- B.1) Summary-Ausgabe abfangen -----------------------------------------
train_sum <- capture.output(summary(train_data))
test_sum  <- capture.output(summary(test_data))
##############################################################################
# KAPITEL C) Boxplot erzeugen & als PNG abfangen (Folie 6)
##############################################################################
# Beschreibung:
#  - Erstellt einen Boxplot (ggplot2), in dem alle relevanten numerischen
#    Variablen (z-standardisiert) dargestellt werden
#  - Hintergrundfarbe: #ffe6f7
#  - Ergebnis wird als Base64-String (img_b64) gespeichert, um z.B. in HTML
#    direkt eingebettet zu werden.
##############################################################################
# --- C.0) Pakete laden ------------------------------------------------------
library(dplyr)
library(tidyr)
library(ggplot2)
library(base64enc)
# --- C.1) Kennzeichnung der Datensätze (Train vs. Test) ---------------------
train_data$Dataset <- "Train"
test_data$Dataset  <- "Test"
# --- C.2) Zusammenführen relevanter Spalten in gemeinsamen df --------------
df <- bind_rows(
select(train_data, Dataset,
`Anzahl Spenden`, Gesamtvolumen,
`Monate Erste Spende`, `Monate Letzte Spende`),
select(test_data, Dataset,
`Anzahl Spenden`, Gesamtvolumen,
`Monate Erste Spende`, `Monate Letzte Spende`)
)
# --- C.3) Skalieren (z-Standardisierung) ------------------------------------
df_scaled <- df %>%
mutate(across(!Dataset, scale))
# --- C.4) Long-Format vorbereiten (für ggplot) ------------------------------
df_long <- pivot_longer(
df_scaled,
cols      = c(
"Anzahl Spenden",
"Gesamtvolumen",
"Monate Erste Spende",
"Monate Letzte Spende"
),
names_to  = "Variable",
values_to = "Wert"
)
# --- C.5) Boxplot erstellen -------------------------------------------------
p <- ggplot(df_long, aes(x = Variable, y = Wert, fill = Dataset)) +
geom_boxplot(
notch         = TRUE,    # Kerben anzeigen
notchwidth    = 0.3,
outlier.shape = 21,
alpha         = 0.7,
color         = "black",
size          = 1
) +
# Keine Achsen-Expansion => kein zusätzlicher Leerraum
scale_y_continuous(expand = expansion(mult = c(0, 0))) +
scale_x_discrete(expand = expansion(mult = c(0, 0))) +
labs(
title = "Skalierte numerische Variablen",
x     = NULL,
y     = "Skalierter Wert"
) +
theme_minimal(base_size = 14) +
theme(
panel.background    = element_rect(fill = "#ffe6f7", color = NA),
plot.background     = element_rect(fill = "#ffe6f7", color = NA),
legend.background   = element_rect(fill = "#ffe6f7", color = NA),
legend.key          = element_rect(fill = "#ffe6f7", color = NA),
# Überschrift
plot.title          = element_text(
color = "black", size = 18, face = "bold", hjust = 0.5
),
legend.position     = "right",
legend.text         = element_text(color = "black"),
legend.title        = element_text(color = "black", face = "bold"),
axis.text           = element_text(color = "black"),
axis.title          = element_text(color = "black"),
plot.margin         = margin(5, 20, 5, 20)
)
# --- C.6) PNG-Datei erzeugen & Base64-String abspeichern --------------------
plotfile <- tempfile(fileext = ".png")
# Neu (A4 quer, 300 DPI):
png(plotfile, width = 3508, height = 1500, res = 300, bg = "#ffe6f7")
print(p)
dev.off()
img_b64 <- base64enc::dataURI(file = plotfile, mime = "image/png")
##############################################################################
# KAPITEL D) Vergleich der Verteilungen (Train vs. Test) (Folie 7)
##############################################################################
# Beschreibung:
#  - Erzeugt vier Histogramme (monate letzte spende, anzahl spenden usw.)
#  - Legt die vier Plots nebeneinander als Grid
#  - Speichert sie als "Folie7_Vergleich_Train_Test.png"
##############################################################################
# --- D.0) Pakete laden ------------------------------------------------------
library(ggplot2)
library(dplyr)
library(gridExtra)  # ACHTUNG: wird für arrangeGrob() bzw. grid.arrange() benötigt
library(here)
# --- D.1) Histogramme für die Verteilungen erstellen ------------------------
plot1 <- ggplot(df, aes(x = `Monate Letzte Spende`, fill = Dataset)) +
geom_histogram(position = "dodge", bins = 20, alpha = 0.7, color = "black") +
labs(title = "Monate seit letzter Spende",
x = "Monate", y = "Häufigkeit") +
scale_fill_manual(values = c("blue", "green")) +
theme_minimal(base_size = 16)
plot2 <- ggplot(df, aes(x = `Anzahl Spenden`, fill = Dataset)) +
geom_histogram(position = "dodge", bins = 15, alpha = 0.7, color = "black") +
labs(title = "Anzahl Spenden",
x = "Anzahl", y = "Häufigkeit") +
scale_fill_manual(values = c("blue", "green")) +
theme_minimal(base_size = 16)
plot3 <- ggplot(df, aes(x = Gesamtvolumen, fill = Dataset)) +
geom_histogram(position = "dodge", bins = 20, alpha = 0.7, color = "black") +
labs(title = "Gesamtvolumen Spenden",
x = "Volumen", y = "Häufigkeit") +
scale_fill_manual(values = c("blue", "green")) +
theme_minimal(base_size = 16)
plot4 <- ggplot(df, aes(x = `Monate Erste Spende`, fill = Dataset)) +
geom_histogram(position = "dodge", bins = 20, alpha = 0.7, color = "black") +
labs(title = "Monate seit erster Spende",
x = "Monate", y = "Häufigkeit") +
scale_fill_manual(values = c("blue", "green")) +
theme_minimal(base_size = 16)
# --- D.2) Histogramme in einem Grid anordnen --------------------------------
combined_plot <- arrangeGrob(plot1, plot2, plot3, plot4,
ncol = 2,
top  = "Vergleich der Verteilungen: Trainings- vs. Testdaten")
# --- D.3) Grid als PNG-Datei speichern --------------------------------------
ggsave(
filename = here::here("Folie7_Vergleich_Train_Test.png"),
plot     = combined_plot,
width    = 10,
height   = 5,
dpi      = 300
)
print("✅ Folie 7 erfolgreich erstellt (Histogramm-Grid als PNG gespeichert!)")
##############################################################################
# KAPITEL E) HTML-Seite mit 10 Folien/Slides erzeugen
##############################################################################
# Beschreibung:
#  - Baut ein kleines HTML-Dokument via htmltools
#  - Jede „Folie“ wird als DIV mit einer spezifischen Hintergrundfarbe dargestellt
#  - In Folie 4 werden train_sum und test_sum (Summary-Statistiken) ausgegeben
#  - In Folie 6 wird der Boxplot (Base64 eingebettet) dargestellt
#  - In Folie 7 wird "Folie7_Vergleich_Train_Test.png" eingefügt
##############################################################################
# --- E.0) Pakete laden ------------------------------------------------------
library(htmltools)
# --- E.1) HTML-Struktur definieren ------------------------------------------
page <- tags$html(
tags$head(
tags$title("Foliensatz: Summary & Boxplot"),
tags$style("
/* @page: Format A4 Querformat mit 1.0cm Rand */
@page {
size: A4 landscape;
margin: 1.0cm;
}
body {
font-family: Arial, sans-serif;
margin: 0;
padding: 0;
}
h1 {
background-color: #007ACC;
color: white;
padding: 10px;
margin: 0;
}
.slide {
padding: 10px 20px;
margin-bottom: 10px;
page-break-after: always;
}
.slide1  { background-color: #fafafa; }
.slide2  { background-color: #e6f0ff; }
.slide3  { background-color: #f9f0e6; }
.slide4  { background-color: #f2e6ff; }
.slide5  { background-color: #e6fff5; }
.slide6  { background-color: #ffe6f7; }
.slide7  { background-color: #fffbe6; }
.slide8  { background-color: #e6ffe6; }
.slide9  { background-color: #ffe6e6; }
.slide10 { background-color: #f0f0f0; }
h2 {
font-size: 20px;
}
.summary-block {
background-color: #f8f9fa;
padding: 10px;
border-radius: 5px;
margin-bottom: 30px;
}
pre {
font-family: 'Courier New', Courier, monospace;
font-size: 14px;
white-space: pre-wrap;
}
.subtitle {
color: white;
font-size: 18px;
margin-top: 0;
margin-bottom: 20px;
}
.download-link {
display: inline-block;
margin-top: 15px;
padding: 8px 12px;
background-color: #007BFF;
color: #FFFFFF;
text-decoration: none;
border-radius: 5px;
font-weight: bold;
}
.download-link:hover {
background-color: #0056b3;
}
.violett-box {
margin-top: 20px;
background-color: #5C2E66;
color: white;
padding: 15px;
border-radius: 5px;
}
")
),
tags$body(
# Folie 1
tags$div(class = "slide slide1",
tags$h1("Folie 1: Titelbild"),
tags$img(
src = here::here("Folie1.png"),
style = "max-width: 100%; height: auto;"
),
tags$a(
href     = here::here("Titelseite.pdf"),
download = NA,
class    = "download-link",
"Titelseite (PDF Download)"
)
),
# Folie 2
tags$div(class = "slide slide2",
tags$h1("Folie 2: Workflow Diagramm"),
tags$img(
src = here::here("Folie2.png"),
style = "max-width: 100%; height: auto;"
),
tags$a(
href     = here::here("Workflow.pdf"),
download = NA,
class    = "download-link",
"Workflow (PDF Download)"
)
),
# Folie 3
tags$div(class = "slide slide3",
tags$h1("Folie 3: ..."),
tags$p("Hier könnte ein weiterer Inhalt stehen.")
),
# Folie 4
tags$div(class = "slide slide4",
tags$h1("Folie 4: Statistische Kennzahlen"),
tags$h2("Trainingsdaten Zusammenfassung"),
tags$p("Mit 'summary' gewinnen wir einen statistischen Überblick."),
tags$div(
class = "summary-block",
tags$pre(paste(train_sum, collapse = "\n"))
),
tags$h2("Testdaten Zusammenfassung"),
tags$p("Auch die Testdaten werden zusammengefasst."),
tags$div(
class = "summary-block",
tags$pre(paste(test_sum, collapse = "\n"))
)
),
# Folie 5
tags$div(class = "slide slide5",
tags$h1("Folie 5: ..."),
tags$p("Noch ein Platzhalter für weiteren Inhalt.")
),
# Folie 6
tags$div(class = "slide slide6",
tags$h1("Folie 6: Vergleich der Trainings- und Testdaten"),
tags$img(
src   = img_b64,
style = "max-width: 100%; height: auto;"
),
tags$div(
class = "violett-box",
tags$strong("Erkenntnisse:"),
tags$ul(
tags$li("Verteilungen der Variablen sind nicht sehr unterschiedlich (Train vs. Test)."),
tags$li("Kerben der Boxen überlappen => Variabilität im Testdatensatz teils geringer.")
),
tags$br(),
tags$strong("Schlussfolgerung:"),
tags$p("Train- und Testdaten sind Stichproben aus derselben Population.")
)
),
# Folie 7
tags$div(class = "slide slide7",
tags$h1("Folie 7: Vergleich der Verteilungen Test vs. Train"),
tags$img(
src = here::here("Folie7_Vergleich_Train_Test.png"),
style = "max-width: 100%; height: auto;"
),
tags$div(
class = "violett-box",
tags$strong("Erkenntnisse:"),
tags$ul(
tags$li("Trainings- und Testdaten haben ähnliche Verteilungen."),
tags$li("Leichte Unterschiede in der Anzahl Spenden im Testset."),
tags$li("Gesamtvolumen im Testset etwas niedriger.")
),
tags$br(),
tags$strong("Schlussfolgerung:"),
tags$p("Die Unterschiede könnten die Modellleistung beeinflussen.")
)
),
# Folie 8
tags$div(class = "slide slide8",
tags$h1("Folie 8: Weiterer Inhalt"),
tags$p("Noch mehr Platzhalter...")
),
# Folie 9
tags$div(class = "slide slide9",
tags$h1("Folie 9: Weiterer Inhalt"),
tags$p("Noch mehr Platzhalter...")
),
# Folie 10
tags$div(class = "slide slide10",
tags$h1("Folie 10: Weiterer Inhalt"),
tags$p("Noch mehr Platzhalter...")
)
)
)
##############################################################################
# KAPITEL F) HTML-Seite anzeigen
##############################################################################
# Beschreibung:
#  - html_print(page) zeigt die erzeugte HTML-Seite sofort in RStudio/Browser an
##############################################################################
html_print(page)
