.download-link:hover {
background-color: #0056b3;
}
.violett-box {
margin-top: 20px;
background-color: #5C2E66;
color: white;
padding: 15px;
border-radius: 5px;
}
")
),
tags$body(
# Folie 1: Titelbild (PDF -> PNG)
tags$div(class = "slide slide1",
tags$h1("Folie 1: Titelbild"),
tags$img(
src = "Präsentation/Folie1.png",
style = "max-width: 100%; height: auto;"
),
tags$a(
href     = here::here("Titelseite.pdf"),
download = NA,
class    = "download-link",
"Titelseite (PDF Download)"
)
),
# Folie 2: Workflow Diagramm (PDF -> PNG)
tags$div(class = "slide slide2",
tags$h1("Folie 2: Workflow Diagramm"),
tags$img(
src = "Präsentation/Folie2.png",
style = "max-width: 100%; height: auto;"
),
tags$a(
href     = here::here("Workflow.pdf"),
download = NA,
class    = "download-link",
"Workflow (PDF Download)"
)
),
# Folie 3: Platzhalter für weiteren Inhalt
tags$div(class = "slide slide3",
tags$h1("Folie 3: ..."),
tags$p("Hier könnte ein weiterer Inhalt stehen.")
),
# Folie 4: Statistische Kennzahlen (Summary der Datensätze)
tags$div(class = "slide slide4",
tags$h1("Folie 4: Statistische Kennzahlen"),
tags$h2("Trainingsdaten Zusammenfassung"),
tags$p("Mit 'summary' gewinnen wir einen statistischen Überblick."),
tags$div(
class = "summary-block",
tags$pre(paste(train_sum, collapse = "\n"))
),
tags$h2("Testdaten Zusammenfassung"),
tags$p("Auch die Testdaten werden zusammengefasst."),
tags$div(
class = "summary-block",
tags$pre(paste(test_sum, collapse = "\n"))
)
),
# Folie 5: Platzhalter für weiteren Inhalt
tags$div(class = "slide slide5",
tags$h1("Folie 5: ..."),
tags$p("Noch ein Platzhalter für weiteren Inhalt.")
),
# Folie 6: Boxplot (PNG)
tags$div(class = "slide slide6",
tags$h1("Folie 6: Boxplot der z-standardisierten Variablen"),
tags$img(
src   = "Präsentation/Folie6.png",
style = "max-width: 100%; height: auto;"
),
tags$div(
class = "violett-box",
tags$strong("Erkenntnisse:"),
tags$ul(
tags$li("Die Boxplots zeigen die Verteilung der z-standardisierten numerischen Variablen."),
tags$li("Unterschiede zwischen Train und Test deuten auf ähnliche Verteilungen hin.")
),
tags$br(),
tags$strong("Schlussfolgerung:"),
tags$p("Die Trainings- und Testdaten scheinen aus der gleichen Population zu stammen.")
)
),
# Folie 7: Vergleich der Verteilungen (Histogramm-Grid, PNG)
tags$div(class = "slide slide7",
tags$h1("Folie 7: Vergleich der Verteilungen Test vs. Train"),
tags$img(
src = "Präsentation/Folie7_Vergleich_Train_Test.png",
style = "max-width: 100%; height: auto;"
),
tags$div(
class = "violett-box",
tags$strong("Erkenntnisse:"),
tags$ul(
tags$li("Trainings- und Testdaten haben ähnliche Verteilungen."),
tags$li("Leichte Unterschiede bei der Anzahl der Spenden im Testset."),
tags$li("Das Gesamtvolumen im Testset ist etwas niedriger.")
),
tags$br(),
tags$strong("Schlussfolgerung:"),
tags$p("Die Unterschiede könnten die Modellleistung beeinflussen.")
)
),
# Folie 8: Platzhalter für weiteren Inhalt
tags$div(class = "slide slide8",
tags$h1("Folie 8: Weiterer Inhalt"),
tags$p("Noch mehr Platzhalter...")
),
# Folie 9: Platzhalter für weiteren Inhalt
tags$div(class = "slide slide9",
tags$h1("Folie 9: Weiterer Inhalt"),
tags$p("Noch mehr Platzhalter...")
),
# Folie 10: Platzhalter für weiteren Inhalt
tags$div(class = "slide slide10",
tags$h1("Folie 10: Weiterer Inhalt"),
tags$p("Noch mehr Platzhalter...")
)
)
)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(ggplot2)
library(dplyr)
library(tidyr)
library(gridExtra)
library(here)
library(htmltools)
# Variante A) mit list.files() und file.remove() (empfohlen)
files <- list.files(
"C:/Users/matth/OneDrive/AB1_R Projekte aktuell/Fallstudie/Präsentation",
full.names = TRUE
)
file.remove(files)
# Variante B) via system(...) und Windows-CMD (mit *.* um auch .txt Dateien zu löschen)
system('cmd /c "del /F /Q \"C:/Users/matth/OneDrive/AB1_R Projekte aktuell/Fallstudie/Präsentation\\*.*\""')
# Ordner für Präsentation anlegen
presentation_dir <- here::here("Präsentation")
if (!dir.exists(presentation_dir)) {
dir.create(presentation_dir)
}
# Daten laden
train_data <- read.csv(here::here("bloodtrain.csv"))
test_data  <- read.csv(here::here("bloodtest.csv"))
# Spaltennamen anpassen
colnames(train_data) <- c("ID", "Monate Letzte Spende", "Anzahl Spenden", "Gesamtvolumen", "Monate Erste Spende", "Spende Maerz 2007")
colnames(test_data)  <- c("ID", "Monate Letzte Spende", "Anzahl Spenden", "Gesamtvolumen", "Monate Erste Spende")
# Datensätze kennzeichnen
train_data$Dataset <- "Train"
test_data$Dataset  <- "Test"
# Zusammenführen für Plots
df <- bind_rows(
select(train_data, Dataset, `Anzahl Spenden`, Gesamtvolumen, `Monate Erste Spende`, `Monate Letzte Spende`),
select(test_data, Dataset, `Anzahl Spenden`, Gesamtvolumen, `Monate Erste Spende`, `Monate Letzte Spende`)
)
pdf_convert(
pdf       = here::here("Titelseite.pdf"),                                # Quelle PDF-Datei
pages     = 1,                                                           # Verwende Seite 1
filenames = file.path(presentation_dir, "1) Titelbild.png"),                     # Ziel-Datei im Ordner "Präsentation"
dpi       = 300
)
# Ordner für Präsentation anlegen
presentation_dir <- here::here("Präsentation")
if (!dir.exists(presentation_dir)) {
dir.create(presentation_dir)
}
# Daten laden
train_data <- read.csv(here::here("bloodtrain.csv"))
test_data  <- read.csv(here::here("bloodtest.csv"))
# Spaltennamen anpassen
colnames(train_data) <- c("ID", "Monate Letzte Spende", "Anzahl Spenden", "Gesamtvolumen", "Monate Erste Spende", "Spende Maerz 2007")
colnames(test_data)  <- c("ID", "Monate Letzte Spende", "Anzahl Spenden", "Gesamtvolumen", "Monate Erste Spende")
# Datensätze kennzeichnen
train_data$Dataset <- "Train"
test_data$Dataset  <- "Test"
# Zusammenführen für Plots
df <- bind_rows(
select(train_data, Dataset, `Anzahl Spenden`, Gesamtvolumen, `Monate Erste Spende`, `Monate Letzte Spende`),
select(test_data, Dataset, `Anzahl Spenden`, Gesamtvolumen, `Monate Erste Spende`, `Monate Letzte Spende`)
)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(ggplot2)
library(dplyr)
library(tidyr)
library(gridExtra)
library(here)
library(htmltools)
# Variante A) mit list.files() und file.remove() (empfohlen)
files <- list.files(
"C:/Users/matth/OneDrive/AB1_R Projekte aktuell/Fallstudie/Präsentation",
full.names = TRUE
)
file.remove(files)
# Variante B) via system(...) und Windows-CMD (mit *.* um auch .txt Dateien zu löschen)
system('cmd /c "del /F /Q \"C:/Users/matth/OneDrive/AB1_R Projekte aktuell/Fallstudie/Präsentation\\*.*\""')
# Ordner für Präsentation anlegen
presentation_dir <- here::here("Präsentation")
if (!dir.exists(presentation_dir)) {
dir.create(presentation_dir)
}
# Daten laden
train_data <- read.csv(here::here("bloodtrain.csv"))
test_data  <- read.csv(here::here("bloodtest.csv"))
# Spaltennamen anpassen
colnames(train_data) <- c("ID", "Monate Letzte Spende", "Anzahl Spenden", "Gesamtvolumen", "Monate Erste Spende", "Spende Maerz 2007")
colnames(test_data)  <- c("ID", "Monate Letzte Spende", "Anzahl Spenden", "Gesamtvolumen", "Monate Erste Spende")
# Datensätze kennzeichnen
train_data$Dataset <- "Train"
test_data$Dataset  <- "Test"
# Zusammenführen für Plots
df <- bind_rows(
select(train_data, Dataset, `Anzahl Spenden`, Gesamtvolumen, `Monate Erste Spende`, `Monate Letzte Spende`),
select(test_data, Dataset, `Anzahl Spenden`, Gesamtvolumen, `Monate Erste Spende`, `Monate Letzte Spende`)
)
pdf_convert(
pdf       = here::here("Titelseite.pdf"),                                # Quelle PDF-Datei
pages     = 1,                                                           # Verwende Seite 1
filenames = file.path(presentation_dir, "1) Titelbild.png"),                     # Ziel-Datei im Ordner "Präsentation"
dpi       = 300
)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(ggplot2)
library(dplyr)
library(tidyr)
library(gridExtra)
library(here)
library(htmltools)
# Variante A) mit list.files() und file.remove() (empfohlen)
files <- list.files(
"C:/Users/matth/OneDrive/AB1_R Projekte aktuell/Fallstudie/Präsentation",
full.names = TRUE
)
file.remove(files)
# Variante B) via system(...) und Windows-CMD (mit *.* um auch .txt Dateien zu löschen)
system('cmd /c "del /F /Q \"C:/Users/matth/OneDrive/AB1_R Projekte aktuell/Fallstudie/Präsentation\\*.*\""')
# Ordner für Präsentation anlegen
presentation_dir <- here::here("Präsentation")
if (!dir.exists(presentation_dir)) {
dir.create(presentation_dir)
}
# Daten laden
train_data <- read.csv(here::here("bloodtrain.csv"))
test_data  <- read.csv(here::here("bloodtest.csv"))
# Spaltennamen anpassen
colnames(train_data) <- c("ID", "Monate Letzte Spende", "Anzahl Spenden", "Gesamtvolumen", "Monate Erste Spende", "Spende Maerz 2007")
colnames(test_data)  <- c("ID", "Monate Letzte Spende", "Anzahl Spenden", "Gesamtvolumen", "Monate Erste Spende")
# Datensätze kennzeichnen
train_data$Dataset <- "Train"
test_data$Dataset  <- "Test"
# Zusammenführen für Plots
df <- bind_rows(
select(train_data, Dataset, `Anzahl Spenden`, Gesamtvolumen, `Monate Erste Spende`, `Monate Letzte Spende`),
select(test_data, Dataset, `Anzahl Spenden`, Gesamtvolumen, `Monate Erste Spende`, `Monate Letzte Spende`)
)
pdf_convert(
pdf       = here::here("Titelseite.pdf"),                                # Quelle PDF-Datei
pages     = 1,                                                           # Verwende Seite 1
filenames = file.path(presentation_dir, "1) Titelbild.png"),                     # Ziel-Datei im Ordner "Präsentation"
dpi       = 300
)
pdf_convert(
pdf       = here::here("Titelseite.pdf"),                                # Quelle PDF-Datei
pages     = 1,                                                           # Verwende Seite 1
filenames = file.path(presentation_dir, "1) Titelbild.png"),                     # Ziel-Datei im Ordner "Präsentation"
dpi       = 300
)
pdf_convert(
pdf       = here::here("Titelseite.pdf"),                                # Quelle PDF-Datei
pages     = 1,                                                           # Verwende Seite 1
filenames = file.path(presentation_dir, "1) Titelbild.png"),                     # Ziel-Datei im Ordner "Präsentation"
dpi       = 300
)
pdf_convert(
pdf       = here::here("Titelseite.pdf"),                                # Quelle PDF-Datei
pages     = 1,                                                           # Verwende Seite 1
filenames = file.path(presentation_dir, "1) Titelbild.png"),                     # Ziel-Datei im Ordner "Präsentation"
dpi       = 300
)
pdf_convert(
pdf       = here::here("Workflow.pdf"),                                  # Quelle PDF-Datei
pages     = 1,                                                           # Verwende Seite 1
filenames = file.path(presentation_dir, "2) Workflow Diagramm.png"),                     # Ziel-Datei im Ordner "Präsentation"
dpi       = 300
)
# -------------------------------------------------------------------
# Folie 4: Statistische Kennzahlen (Summary der Datensätze)
# -------------------------------------------------------------------
# Wir gehen davon aus, dass das aktuelle Arbeitsverzeichnis (WD) stimmt
# oder wir hier::here(...) benutzen. Beispielhaft:
library(dplyr)     # Für Daten-Manipulation
library(shiny)     # Oder RMarkdown, wenn du es dort einbettest
# 1) Daten laden ----------------------------------------------------
train_data <- read.csv("bloodtrain.csv", stringsAsFactors = FALSE)
test_data  <- read.csv("bloodtest.csv",  stringsAsFactors = FALSE)
# 2) Spaltennamen anpassen ------------------------------------------
colnames(train_data) <- c(
"ID",
"MonateLetzteSpende",
"AnzahlSpenden",
"Gesamtvolumen",
"MonateErsteSpende",
"SpendeMaerz2007"       # Zielvariable
)
colnames(test_data) <- c(
"ID",
"MonateLetzteSpende",
"AnzahlSpenden",
"Gesamtvolumen",
"MonateErsteSpende"
)
# => Nun hat test_data keine Zielvariable (logisch)
# 3) Zielvariable im Trainingsdatensatz als Faktor kodieren ----------
train_data$SpendeMaerz2007 <- as.factor(train_data$SpendeMaerz2007)
# 4) summary() erfassen ---------------------------------------------
train_sum <- capture.output(summary(train_data))
test_sum  <- capture.output(summary(test_data))
# 5) Ausgabe für Folie 4 in tags$div --------------------------------
# (Sofern du z.B. in einer Shiny-App oder in RMarkdown via HTML-Output arbeitest)
tags$div(
class = "slide slide4",
# Hauptüberschrift
tags$h1("Folie 4: Statistische Kennzahlen"),
# 2.1.1 Trainingsdaten Zusammenfassung
tags$h2("2.1.1 Trainingsdaten Zusammenfassung"),
tags$p("Mit `summary` gewinnen wir einen statistischen Überblick.
Die Variable 'SpendeMaerz2007' ist unsere Zielvariable (Output-Variable)."),
# Block für das Training-Summary
tags$div(
class = "summary-block",
tags$pre(paste(train_sum, collapse = "\n"))
),
# 2.2.1 Testdaten Zusammenfassung
tags$h2("2.2.1 Testdaten Zusammenfassung"),
tags$p("Auch die Testdaten werden zusammengefasst.
Hier ist die Zielvariable 'SpendeMaerz2007' nicht enthalten."),
# Block für das Test-Summary
tags$div(
class = "summary-block",
tags$pre(paste(test_sum, collapse = "\n"))
)
)
# 1) Boxplot der Verteilungen (Folie 6)
# Daten skalieren (falls nicht bereits geschehen)
df_scaled <- df %>%
mutate(across(!Dataset, scale))
# In Long-Format umwandeln
df_long <- pivot_longer(
df_scaled,
cols = c("Anzahl Spenden", "Gesamtvolumen",
"Monate Erste Spende", "Monate Letzte Spende"),
names_to = "variable",
values_to = "wert"
)
# Boxplot erstellen
p <- ggplot(df_long, aes(x = variable, y = wert, fill = Dataset)) +
geom_boxplot(
notch = TRUE,
notchwidth = 0.3,
#outlier.shape = 21,
#outlier.size = 1,
alpha = 0.7,
color = "black",   # Rahmenfarbe
size = 0.5         # Dünnere Linienbreite
) +
# Manuelle Farbpalette: Rot für Test, Blau für Train
scale_fill_manual(values = c("Test" = "red", "Train" = "blue")) +
# Achsenanpassung
scale_x_discrete(expand = expansion(mult = c(0, 0))) +
scale_y_continuous(expand = expansion(mult = c(0, 0))) +
# Titel und Achsenbeschriftung
labs(
title = "Vergleich der Trainings- und Testdaten",
x = NULL,         # Keine separate X-Achsen-Beschriftung
y = "Skalierter Wert"
) +
# Minimal-Theme + weißer Hintergrund für gesamte Fläche
theme_minimal(base_size = 14) +
theme(
panel.background = element_rect(fill = "white", color = NA),  # Plot-Innenraum weiß
plot.background  = element_rect(fill = "white", color = NA)   # Gesamte Zeichenfläche weiß
)
# Speichern als PNG
ggsave(
filename = file.path(presentation_dir, "6_Boxplot_Vergleich_test_train.png"),
plot = p,
width = 10,
height = 5.5,
dpi = 500
)
p
# Histogramme erstellen
plot1 <- ggplot(df, aes(x = `Monate Letzte Spende`, fill = Dataset)) +
geom_histogram(position = "dodge", bins = 20, alpha = 0.7, color = "black") +
labs(title = "Monate seit letzter Spende", x = "Monate", y = "Häufigkeit") +
scale_fill_manual(values = c("Test" = "red", "Train" = "blue")) +
theme_minimal(base_size = 16)
plot2 <- ggplot(df, aes(x = `Anzahl Spenden`, fill = Dataset)) +
geom_histogram(position = "dodge", bins = 15, alpha = 0.7, color = "black") +
labs(title = "Anzahl Spenden", x = "Anzahl", y = "Häufigkeit") +
scale_fill_manual(values = c("Test" = "red", "Train" = "blue")) +
theme_minimal(base_size = 16)
plot3 <- ggplot(df, aes(x = Gesamtvolumen, fill = Dataset)) +
geom_histogram(position = "dodge", bins = 20, alpha = 0.7, color = "black") +
labs(title = "Gesamtvolumen Spenden", x = "Volumen", y = "Häufigkeit") +
scale_fill_manual(values = c("Test" = "red", "Train" = "blue")) +
theme_minimal(base_size = 16)
plot4 <- ggplot(df, aes(x = `Monate Erste Spende`, fill = Dataset)) +
geom_histogram(position = "dodge", bins = 20, alpha = 0.7, color = "black") +
labs(title = "Monate seit erster Spende", x = "Monate", y = "Häufigkeit") +
scale_fill_manual(values = c("Test" = "red", "Train" = "blue")) +
theme_minimal(base_size = 16)
# Klassenverteilung nur für Trainingsdaten (Spalte existiert nur dort)
plot5 <- ggplot(filter(train_data, !is.na(`Spende Maerz 2007`)),
aes(x = `Spende Maerz 2007`, fill = Dataset)) +
geom_bar(position = "dodge", alpha = 0.7, color = "black") +
labs(title = "Klassenverteilung Spende März 2007 (Train)",
x = "Klasse", y = "Häufigkeit") +
scale_fill_manual(values = c("Train" = "blue")) +
theme_minimal(base_size = 16)
# Erstellung von Histogrammen für jede Variable
p1 <- ggplot(combined_data, aes(x = MonateLetzteSpende, fill = Dataset)) +
geom_histogram(binwidth = 1, position = "dodge", color = "black") +
labs(title = "Monate Letzte Spende", x = "Monate", y = "Frequenz") +
theme_minimal() +
scale_fill_manual(values = c("Train" = "blue", "Test" = "green")) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 14),  # Drehung der X-Achsentexte und Schriftgröße
axis.title.x = element_text(size = 16),  # Größere Achsentitel
axis.title.y = element_text(size = 16),  # Größere Achsentitel
axis.text.y = element_text(size = 14),  # Größere y-Achsentick-Beschriftungen
plot.title = element_text(size = 18, face = "bold")  # Größerer Titel
)
# Erstellung von Histogrammen für jede Variable
p1 <- ggplot(combined_data, aes(x = Monate Letzte Spende, fill = Dataset)) +
# Erstellung von Histogrammen für jede Variable
p1 <- ggplot(combined_data, aes(x = `Monate Letzte Spende`, fill = Dataset)) +
geom_histogram(binwidth = 1, position = "dodge", color = "black") +
labs(title = "Monate Letzte Spende", x = "Monate", y = "Frequenz") +
theme_minimal() +
scale_fill_manual(values = c("Train" = "blue", "Test" = "green")) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 14),  # Drehung der X-Achsentexte und Schriftgröße
axis.title.x = element_text(size = 16),  # Größere Achsentitel
axis.title.y = element_text(size = 16),  # Größere Achsentitel
axis.text.y = element_text(size = 14),  # Größere y-Achsentick-Beschriftungen
plot.title = element_text(size = 18, face = "bold")  # Größerer Titel
)
# Erstellung von Histogrammen für jede Variable
p1 <- ggplot(combined_data, aes(x = `Monate Letzte Spende`, fill = Dataset)) +
geom_histogram(binwidth = 1, position = "dodge", color = "black") +
labs(title = "Monate Letzte Spende", x = "Monate", y = "Frequenz") +
theme_minimal() +
scale_fill_manual(values = c("Train" = "blue", "Test" = "green")) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 14),  # Drehung der X-Achsentexte und Schriftgröße
axis.title.x = element_text(size = 16),  # Größere Achsentitel
axis.title.y = element_text(size = 16),  # Größere Achsentitel
axis.text.y = element_text(size = 14),  # Größere y-Achsentick-Beschriftungen
plot.title = element_text(size = 18, face = "bold")  # Größerer Titel
)
# Erstellung von Histogrammen für jede Variable
p1 <- ggplot(combined_data, aes(x = `Monate Letzte Spende`, fill = Dataset)) +
geom_histogram(binwidth = 1, position = "dodge", color = "black") +
labs(title = "Monate Letzte Spende", x = "Monate", y = "Frequenz") +
theme_minimal() +
scale_fill_manual(values = c("Train" = "blue", "Test" = "green")) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 14),  # Drehung der X-Achsentexte und Schriftgröße
axis.title.x = element_text(size = 16),  # Größere Achsentitel
axis.title.y = element_text(size = 16),  # Größere Achsentitel
axis.text.y = element_text(size = 14),  # Größere y-Achsentick-Beschriftungen
plot.title = element_text(size = 18, face = "bold")  # Größerer Titel
)
# Erstellung von Histogrammen für jede Variable
p1 <- ggplot(combined_data, aes(x = `Monate Letzte Spende`, fill = Dataset)) +
geom_histogram(binwidth = 1, position = "dodge", color = "black") +
labs(title = "Monate Letzte Spende", x = "Monate", y = "Frequenz") +
theme_minimal() +
scale_fill_manual(values = c("Train" = "blue", "Test" = "green")) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 14),  # Drehung der X-Achsentexte und Schriftgröße
axis.title.x = element_text(size = 16),  # Größere Achsentitel
axis.title.y = element_text(size = 16),  # Größere Achsentitel
axis.text.y = element_text(size = 14),  # Größere y-Achsentick-Beschriftungen
plot.title = element_text(size = 18, face = "bold")  # Größerer Titel
)
# Erstellung von Histogrammen für jede Variable
p1 <- ggplot(combined_data, aes(x = `Monate Letzte Spende`, fill = Dataset)) +
geom_histogram(binwidth = 1, position = "dodge", color = "black") +
labs(title = "Monate Letzte Spende", x = "Monate", y = "Frequenz") +
theme_minimal() +
scale_fill_manual(values = c("Train" = "blue", "Test" = "green")) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 14),  # Drehung der X-Achsentexte und Schriftgröße
axis.title.x = element_text(size = 16),  # Größere Achsentitel
axis.title.y = element_text(size = 16),  # Größere Achsentitel
axis.text.y = element_text(size = 14),  # Größere y-Achsentick-Beschriftungen
plot.title = element_text(size = 18, face = "bold")  # Größerer Titel
)
# Kombinieren der Daten für den Vergleich
combined_data <- bind_rows(
train[, c("MonateLetzteSpende", "AnzahlSpenden", "Gesamtvolumen", "MonateErsteSpende", "Dataset")],
test[, c("MonateLetzteSpende", "AnzahlSpenden", "Gesamtvolumen", "MonateErsteSpende", "Dataset")]
# Erstellung von Histogrammen für jede Variable
p1 <- ggplot(combined_data, aes(x = `Monate Letzte Spende`, fill = Dataset)) +
# Kombinieren der Daten für den Vergleich
combined_data <- bind_rows(
train[, c("MonateLetzteSpende", "AnzahlSpenden", "Gesamtvolumen", "MonateErsteSpende", "Dataset")],
test[, c("MonateLetzteSpende", "AnzahlSpenden", "Gesamtvolumen", "MonateErsteSpende", "Dataset")]
)
