# Laden der benötigten Bibliotheken ----
library(shiny)
library(here)
library(DT)
library(dplyr)
library(ggplot2)      # Für ggplot2-Funktionen
library(corrplot)     # Für corrplot-Funktionen
library(gridExtra)    # Für grid.arrange
library(pROC)         # Für ROC-Kurve
library(caret)        # Für Variable Importance
library(e1071)        # Für Schiefe und Kurtosis
library(tidyr)        # Für pivot_longer
library(scales)       # Für rescale

# Definition des Benutzerinterfaces (UI) der Shiny-App ----
ui <- fluidPage( # Anfang von fluidPage ----
                 
                 # Titel des Dashboards UI ----
                 titlePanel("Blutspende-Datenanalyse"),
                 
                 # Seitenaufteilung in Sidebar und Main Panel UI ----
                 sidebarLayout( # Anfang von sidebarLayout ----
                                
                                # Sidebar Panel (linke Seite der App) UI ----
                                sidebarPanel(
                                  h3("Modellparameter"),
                                  width = 3,  # Etwas breiter für bessere Platzierung
                                  
                                  # Dynamische Auswahl der Prädiktoren ----
                                  uiOutput("predictors_ui"),
                                  
                                  actionButton(inputId = "trainModel", label = "Modell trainieren"),
                                  
                                  tags$hr(),
                                  
                                  # Hinweis auf Feature Engineering ----
                                  h4("Feature Engineering"),
                                  helpText("Erstellen Sie neue Prädiktoren basierend auf bestehenden Variablen.")
                                ),
                                
                                # Main Panel (rechte Seite der App) UI ----
                                mainPanel( # Anfang von mainPanel ----
                                           tabsetPanel( # Anfang von tabsetPanel ----
                                                        
                                                        # 02. Register Prämissen UI  ----
                                                        tabPanel(
                                                          title = "Prämissen", # Registerkarte "Prämissen"
                                                          # 02.1 Ziele der Analyse UI ----
                                                          h3("Ziele der Analyse"),
                                                          tags$p(
                                                            "Diese Shiny-Anwendung wurde entwickelt, um die Blutspenden-Daten 
        aus einer vorhergesagten Perspektive zu analysieren. Die wichtigsten Ziele sind:",
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$ul(
                                                            tags$li("Bereitstellung eines klaren Workflows für die Datenvorbereitung und -bereinigung."),
                                                            tags$li("Visualisierung der Datenstrukturen und Verteilungen."),
                                                            tags$li("Erstellen und Bewerten eines Modells zur Vorhersage der Blutspenden im März 2007."),
                                                            tags$li("Hervorheben wichtiger Variablen für die Vorhersage."),
                                                            tags$li("Bereitstellen eines Tools, das sich flexibel anpassen lässt.")
                                                          ),
                                                          br(),
                                                          
                                                          # 02.2 Informationen über die Daten UI ----
                                                          h3("Datenbeschreibung"),
                                                          tags$p(
                                                            "Die Daten umfassen Informationen über Blutspender und deren Spendenhistorie. Die wichtigsten Variablen sind:",
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$ul(
                                                            tags$li(tags$b("MonateLetzteSpende:"), " Zeit seit der letzten Blutspende in Monaten."),
                                                            tags$li(tags$b("AnzahlSpenden:"), " Gesamtanzahl der Blutspenden."),
                                                            tags$li(tags$b("Gesamtvolumen:"), " Gesamtmenge des gespendeten Blutes."),
                                                            tags$li(tags$b("MonateErsteSpende:"), " Zeit seit der ersten Blutspende."),
                                                            tags$li(tags$b("SpendeMaerz2007:"), " Zielvariable (Ja/Nein) für die Spenden im März 2007 (nur im Trainingsdatensatz).")
                                                          ),
                                                          br(),
                                                          
                                                          # 02.3 Hinweis auf die einzelnen Registerkarten UI ----
                                                          h3("Registerkartenübersicht"),
                                                          tags$p(
                                                            "Die Anwendung ist in mehrere Registerkarten unterteilt, die den Analyseprozess schrittweise strukturieren:",
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$ul(
                                                            tags$li(tags$b("1. Datenverständnis:"), " Überblick über die Struktur und Qualität der Trainings- und Testdaten."),
                                                            tags$li(tags$b("2. Explorative Datenanalyse:"), " Visualisierung von Verteilungen, Korrelationen und Ausreißern."),
                                                            tags$li(tags$b("3. Feature Engineering:"), " Erstellung neuer Prädiktoren und Bewertung der Variablenwichtigkeit."),
                                                            tags$li(tags$b("4. Modellierung und Bewertung:"), " Erstellung, Training und Bewertung des Modells."),
                                                            tags$li(tags$b("5. Fazit:"), " Schlussfolgerungen und Vorhersageergebnisse.")
                                                          )
                                                        ), # Ende von 02. Register Prämissen UI ----
                                                        
                                                        # 1.1 Register Datenverständnis UI ----
                                                        tabPanel(
                                                          title = "1.1", # Registerkarte "Datenverständnis"
                                                          
                                                          ## 1.1.1 Trainingsdaten-Struktur UI ----
                                                          h3("1.1.1 Trainingsdaten Struktur"), 
                                                          tags$p(
                                                            "Diese Zusammenfassung zeigt die grundlegenden Statistiken der numerischen und kategorialen Variablen der Trainingsdaten. Sie hilft dabei, ein erstes Verständnis für die Datenverteilung und -struktur zu entwickeln.", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          verbatimTextOutput("trainSummary"),
                                                          
                                                          ## 1.1.2 Struktur der Trainingsdaten UI ----
                                                          h3("1.1.2 Struktur der Trainingsdaten"),
                                                          tags$p(
                                                            "Die Struktur der Trainingsdaten gibt detaillierte Einblicke in die Datentypen und die ersten paar Einträge jeder Variable. Dies ist nützlich, um sicherzustellen, dass die Daten korrekt geladen und formatiert wurden.", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          verbatimTextOutput("strTrain"),
                                                          
                                                        ), # Ende von 1.1 Register Datenverständnis UI ----
                                                        # 1.2 Register Datenverständnis UI ----
                                                        tabPanel(
                                                          title = "1.2", # Registerkarte "Datenverständnis"
                                                          h3("1.2.1 Testdaten Struktur"),
                                                          tags$p(
                                                            "Diese Zusammenfassung zeigt die grundlegenden Statistiken der numerischen und kategorialen Variablen der Testdaten. Die Testdaten enthalten keine Zielvariable und dienen zur Validierung des Modells.", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          verbatimTextOutput("testSummary"),
                                                          
                                                          ## 1.2.2 Struktur der Testdaten UI ----
                                                          h3("1.2.2 Struktur der Testdaten"),
                                                          tags$p(
                                                            "Die Struktur der Testdaten gibt detaillierte Einblicke in die Datentypen und die ersten paar Einträge jeder Variable. Dies ist wichtig, um die Konsistenz zwischen Trainings- und Testdaten zu überprüfen.", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          verbatimTextOutput("strTest"),
                                                          
                                                        ), # Ende von 1.2 Register Datenverständnis UI ----
                                                        tabPanel(
                                                          title = "1.3", # Registerkarte "Datenverständnis"
                                                          ## 1.3 Fehlende Werte UI ----
                                                          h3("1.3 Fehlende Werte"),
                                                          tags$p(
                                                            "Diese Tabelle zeigt die Anzahl der fehlenden Werte in den Trainings- und Testdaten für jede Variable. Fehlende Werte können die Modellleistung beeinträchtigen und müssen daher identifiziert und behandelt werden.", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tableOutput("missingValues"),
                                                        ), # Ende von 1.3 Register Datenverständnis UI ----
                                                        tabPanel(
                                                          title = "1.4", # Registerkarte "Datenverständnis"
                                                          ## 1.4 Tabelle Duplikate Testdaten UI ----
                                                          h3("1.4 Tabelle Duplikate Testdaten"),
                                                          tags$p(
                                                            "Diese Tabelle zeigt die Anzahl der doppelten IDs in den Testdaten. Doppelte Einträge können die Analyse verzerren und sollten daher identifiziert und bereinigt werden.", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tableOutput("duplikate"),
                                                        ), # Ende von 1.4 Register Datenverständnis UI ----
                                                        tabPanel(
                                                          title = "1.5", # Registerkarte "Datenverständnis"
                                                          ## 1.5.1 Bereinigte Testdaten Zusammenfassung UI ----
                                                          h3("1.5.1 Zusammenfassung der bereinigten Testdaten"),
                                                          tags$p(
                                                            "Diese statistische Zusammenfassung der bereinigten Testdaten gibt einen Überblick über die Verteilung und zentrale Tendenzen der Variablen nach dem Entfernen von Duplikaten und fehlenden Werten.", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          verbatimTextOutput("cleanedTestSummary"),
                                                          
                                                          ## 1.5.2 Struktur der bereinigten Testdaten UI ----
                                                          h3("1.5.2 Struktur der bereinigten Testdaten"),
                                                          tags$p(
                                                            "Die Struktur der bereinigten Testdaten zeigt die Datentypen und die ersten paar Einträge jeder Variable nach der Bereinigung. Dies stellt sicher, dass die Daten bereit für die weitere Analyse sind.", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          verbatimTextOutput("cleanedTestStr")
                                                        ), # Ende von 1.5 Register Datenverständnis UI ----
                                                        
                                                        # 2.1 Register Boxplot mit Ausreißervisualisierung UI ----
                                                        tabPanel(
                                                          title = "2.1",  # Registerkarte "Explorative Datenanalyse"
                                                          
                                                          ## 2.1 Boxplot mit Ausreißererkennung visualisierung UI ----
                                                          h3("2.1 Boxplot mit Ausreißererkennung"),
                                                          
                                                          # Beschreibung
                                                          tags$p(
                                                            "Der Boxplot zeigt die Verteilung der ausgewählten numerischen Variablen in den Trainings- und Testdaten.
        Er hilft dabei:",
                                                            tags$ul(
                                                              tags$li("Ausreißer zu identifizieren, die die Modellleistung beeinflussen könnten."),
                                                              tags$li("Unterschiede in der mittleren Tendenz (Median) zwischen den Datensätzen zu erkennen."),
                                                              tags$li("Potenzielle Variabilitätsunterschiede (Boxlängen) zu analysieren.")
                                                            ),
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          
                                                          # Erkenntnisse
                                                          tags$p("Erkenntnisse:"),
                                                          tags$ul(
                                                            tags$li("Die Verteilungen der Variablen sind größtenteils konsistent zwischen Trainings- und Testdaten."),
                                                            tags$li("Die Variabilität (Boxlänge) einiger Variablen, wie 'AnzahlSpenden', ist im Testdatensatz geringer."),
                                                            tags$li("Ausreißer bei 'Gesamtvolumen' könnten auf Besonderheiten in den Testdaten hinweisen.")
                                                          ),
                                                          
                                                          # Schlussfolgerung
                                                          tags$p("Schlussfolgerung: Es könnten Generalisierungsprobleme auftreten, wenn die Variabilität oder die Verteilung in den Testdaten stark von den Trainingsdaten abweicht. Eine detailliertere Untersuchung könnte erforderlich sein.", 
                                                                 style = "font-size: 10pt;"),
                                                          
                                                          # Plot-Output anzeigen
                                                          plotOutput("dataVisualization_outlier", height = "900px"), # Hinzufügen des fehlenden Plot-Outputs
                                                          
                                                        ), # Ende von 2.1 Boxplot mit Ausreißervisualisierung UI ----
                                                        
                                                        # 2.2 Register Boxplot Trainings- und Testdaten UI ----
                                                        tabPanel(
                                                          title = "2.2", # Registerkarte "Explorative Datenanalyse"
                                                          ## 2.2 Boxplot Trainings- und Testdaten UI ----
                                                          h3("2.2 Streumatrix (Pairsplot)"),
                                                          tags$p(
                                                            "Der Boxplot zeigt die Verteilung der ausgewählten numerischen Variablen in den Trainings- und Testdaten. 
        Er hilft dabei:",
                                                            tags$ul(
                                                              tags$li("Ausreißer zu identifizieren, die die Modellleistung beeinflussen könnten."),
                                                              tags$li("Unterschiede in der mittleren Tendenz (Median) zwischen den Datensätzen zu erkennen."),
                                                              tags$li("Potenzielle Variabilitätsunterschiede (Boxlängen) zu analysieren.")
                                                            ),
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$p("Erkenntnisse:"),
                                                          tags$ul(
                                                            tags$li("Die Verteilungen der Variablen sind größtenteils konsistent zwischen Trainings- und Testdaten."),
                                                            tags$li("Die Variabilität (Boxlänge) einiger Variablen, wie 'AnzahlSpenden', ist im Testdatensatz geringer."),
                                                            tags$li("Ausreißer bei 'Gesamtvolumen' könnten auf Besonderheiten in den Testdaten hinweisen.")
                                                          ),
                                                          tags$p("Schlussfolgerung: Es könnten Generalisierungsprobleme auftreten, wenn die Variabilität oder die Verteilung in den Testdaten stark von den Trainingsdaten abweicht. Eine detailliertere Untersuchung könnte erforderlich sein.", 
                                                                 style = "font-size: 10pt;"),
                                                          plotOutput("dataVisualization", height = "900px"), # Hinzufügen des fehlenden Plot-Outputs
                                                          
                                                        ), # Ende von 2.2 Boxplot Trainings- und Testdaten UI ----
                                                        
                                                        # 2.3 Register Vergleich der Verteilungen zwischen Train und Test UI ----
                                                        tabPanel(
                                                          title = "2.3", # Registerkarte "Explorative Datenanalyse"
                                                          
                                                          ## 2.3 Vergleich der Verteilungen zwischen Train und Test UI ----
                                                          h3("2.3 Vergleich der Verteilungen zwischen Train und Test"),
                                                          tags$p(
                                                            "Diese Visualisierung zeigt die Verteilungen der numerischen Variablen in den Trainings- und Testdaten. Ziel ist es, Unterschiede oder Ähnlichkeiten zu erkennen, um potenzielle Herausforderungen für die Modellgeneralisation zu identifizieren.",
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$ul(
                                                            tags$li("MonateLetzteSpende: Untersucht die zeitliche Verteilung, wann Spenden zuletzt erfolgten."),
                                                            tags$li("AnzahlSpenden: Zeigt die Häufigkeit der Blutspenden pro Spender."),
                                                            tags$li("Gesamtvolumen: Analysiert die Verteilung des gesamten gespendeten Blutvolumens."),
                                                            tags$li("MonateErsteSpende: Gibt Aufschluss über den Zeitraum der ersten Spende.")
                                                          ),
                                                          tags$p("Erkenntnisse aus den Plots:"),
                                                          tags$ul(
                                                            tags$li("**MonateLetzteSpende**: Die Verteilungen stimmen weitgehend überein, aber leichte Verschiebungen im Testdatensatz könnten auf Unterschiede in der Stichprobenstruktur hinweisen."),
                                                            tags$li("**AnzahlSpenden**: Im Testdatensatz gibt es weniger hohe Spendenanzahlen, was auf eine mögliche Stichprobenverzerrung hinweisen könnte."),
                                                            tags$li("**Gesamtvolumen**: Ähnliche Muster wie bei der AnzahlSpenden, da das Gesamtvolumen stark von der AnzahlSpenden abhängt."),
                                                            tags$li("**MonateErsteSpende**: Die Verteilung im oberen Bereich ist im Testdatensatz geringer, was auf unterschiedliche Verhaltensmuster der Spender hinweisen könnte.")
                                                          ),
                                                          tags$p("Schlussfolgerung: Unterschiede in den Verteilungen könnten die Modellleistung beeinflussen. Eine Anpassung der Gewichtung oder weitere Feature-Engineering-Maßnahmen könnten notwendig sein.", 
                                                                 style = "font-size: 10pt;"),
                                                          plotOutput("trainTestComparison", height = "900px"),
                                                          
                                                        ), # Ende von 2.3 Register Vergleich der Verteilungen zwischen Train und Test UI ----
                                                        
                                                        # 2.4 Register Pairs Plot UI ----  
                                                        tabPanel(
                                                          title = "2.4", # Registerkarte "Pairs Plot"
                                                          ## 2.4 Pairs Plot UI ----
                                                          h3("2.4 Pairs Plot"),
                                                          tags$p(
                                                            "Erkenntnisse:",
                                                            tags$ul(
                                                              tags$li("MonateLetzteSpende: Der Boxplot zeigt, dass die Verteilung der Werte in den Trainings- und Testdaten ähnlich ist. Beide Datensätze haben eine ähnliche mittlere Tendenz und Streuung. Dies deutet darauf hin, dass diese Variable zwischen den Datensätzen konsistent bleibt, was positiv für die Modellgeneralisation ist."),
                                                              tags$li("AnzahlSpenden und Gesamtvolumen: Beide Variablen zeigen in Testdaten tendenziell weniger Variabilität (engere Boxen) im Vergleich zu den Trainingsdaten. Dies könnte auf ein Sampling-Bias oder Unterschiede in den beiden Datensätzen hinweisen."),
                                                              tags$li("MonateErsteSpende: Auffällige Unterschiede im oberen Quartil der Werte könnten eine systematische Abweichung zwischen den Datensätzen signalisieren, was die Modellleistung beeinträchtigen könnte.")
                                                            ),
                                                            tags$p("Schlussfolgerung: Unterschiede in den Verteilungen könnten dazu führen, dass ein Modell, das auf den Trainingsdaten trainiert wurde, Schwierigkeiten hat, auf die Testdaten zu generalisieren. Eine weitere Analyse (z. B. Korrekturen oder Feature-Engineering) könnte erforderlich sein."),
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          plotOutput("pairsPlot", height = "900px"), # Plot für Pairs Plot
                                                          
                                                        ), # Ende von 2.4 Register Pairs Plot UI ----
                                                        
                                                        # 2.5 Register Korrelationsmatrix UI ----                                                        
                                                        tabPanel(
                                                          title = "2.5", # Registerkarte "Korrelationsmatrix"
                                                          
                                                          ## 2.5 Korrelationsmatrix UI ----
                                                          h3("2.5 Korrelationsmatrix"),
                                                          tags$p(
                                                            "Die Korrelationsmatrix visualisiert die Stärke und Richtung der linearen Beziehungen zwischen den numerischen Variablen. Positive Korrelationen werden durch rote Farbtöne angezeigt, während negative Korrelationen durch blaue Farbtöne dargestellt werden. Die Intensität der Farbe entspricht der Stärke der Korrelation.",
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$p(
                                                            "Hohe Korrelationen (absoluter Wert > 0.8) können auf redundante Informationen zwischen Variablen hinweisen, während niedrige Korrelationen (absoluter Wert < 0.3) auf unabhängige Informationen hinweisen. Identifizierung solcher Beziehungen hilft, die Modellperformance zu verbessern.",
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$ul(
                                                            tags$li("Hohe Korrelation: `Gesamtvolumen` und `AnzahlSpenden` sind stark positiv korreliert (0.62). Das ist zu erwarten, da das Gesamtvolumen direkt von der AnzahlSpenden abhängt."),
                                                            tags$li("Niedrige Korrelation: `MonateErsteSpende` hat nur eine geringe Korrelation zu anderen Variablen. Dies deutet darauf hin, dass diese Variable unabhängige Informationen liefern könnte."),
                                                            tags$li("Multikollinearität: Variablen mit starker Korrelation sollten untersucht werden, da sie Redundanz verursachen könnten.")
                                                          ),
                                                          tags$p("Empfohlene Maßnahmen:"),
                                                          tags$ul(
                                                            tags$li("Untersuchung hoch korrelierter Variablen: Variablen wie `Gesamtvolumen` und `AnzahlSpenden` könnten redundant sein. Es könnte sinnvoll sein, nur eine der beiden in das Modell aufzunehmen."),
                                                            tags$li("Berücksichtigung unabhängiger Variablen: `MonateErsteSpende` könnte aufgrund seiner geringen Korrelation einen Mehrwert für das Modell bieten."),
                                                            tags$li("Verwendung von PCA oder Regularisierung: Falls mehrere Variablen hoch korreliert sind, könnte eine Hauptkomponentenanalyse (PCA) oder Regularisierungsverfahren wie Lasso helfen.")
                                                          ),
                                                          plotOutput("correlationPlotEnhanced", height = "900px"), 
                                                          # Plot für Korrelationsmatrix
                                                        ), # Ende von 2.5 Register Korrelationsmatrix UI ----
                                                        
                                                        # 2.6-2.7 Register Datenstruktur Outputgrößen UI ----  
                                                        tabPanel(
                                                          title = "2.6", # Registerkarte "Datenstruktur Outputgrößen"
                                                          ## 2.6 Datenstruktur Outputgrößen UI 
                                                          h3("2.6 Datenstruktur Outputgrößen"),
                                                          tags$p(
                                                            "Dieser Abschnitt visualisiert die Struktur der Trainings- und Testdaten. Er zeigt die Anzahl der Beobachtungen (n), der Variablen (p), sowie das Vorhandensein der Zielgröße (Y) für den Trainingsdatensatz.",
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$p(
                                                            "Diese Visualisierung ist hilfreich, um sicherzustellen, dass die Datenkonsistenz zwischen Train- und Testdatensatz gewährleistet ist. Unterschiede in der Anzahl der Variablen oder fehlende Zielgrößen in den Testdaten können Einfluss auf die Modellbewertung haben.",
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$ul(
                                                            tags$li("**Beobachtungen (n):** Der Trainingsdatensatz enthält deutlich mehr Beobachtungen als der Testdatensatz. Dies ist in der Regel positiv, da ein größeres Trainingsset eine robustere Modellanpassung ermöglicht."),
                                                            tags$li("**Variablen (p):** Die Anzahl der Prädiktorvariablen (ohne Zielgröße) ist zwischen Trainings- und Testdatensatz konsistent. Dies zeigt, dass die Datensätze korrekt vorbereitet wurden."),
                                                            tags$li("**Zielgröße (Y):** Die Zielvariable ist erwartungsgemäß nur im Trainingsdatensatz vorhanden, da der Testdatensatz ausschließlich für Vorhersagen verwendet wird.")
                                                          ),
                                                          # Ausgabe der Tabelle
                                                          tableOutput("dataStructurePlot"),
                                                          
                                                          # Ausgabe des Pie Charts
                                                          plotOutput("dataStructurePieChart", height = "600px")
                                                        ), # Ende von 2.6 Register Datenstruktur Outputgrößen UI ----
                                                        
                                                        # 3.1 Register Variable Importance ----
                                                        tabPanel(
                                                          title = "3.1", # Registerkarte "Feature Engineering"
                                                          
                                                          ## 3.1 Variable Importance UI ----
                                                          h3("3.1 Variable Importance"),
                                                          tags$p(
                                                            "Diese Grafik zeigt die Wichtigkeit der ausgewählten Prädikatoren für das trainierte Modell. Eine höhere Wichtigkeit bedeutet, dass die jeweilige Variable einen größeren Beitrag zur Vorhersage der Zielvariable (z. B. Blutspenden im März 2007) leistet.",
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$p(
                                                            "Die Wichtigkeit wird durch die Größe der Balken dargestellt. Variablen mit hohen Werten sind für das Modell entscheidend, während niedrigere Werte auf weniger wichtige Variablen hinweisen können.",
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$ul(
                                                            tags$li("**MonateLetzteSpende:** Diese Variable hat die höchste Wichtigkeit. Das bedeutet, dass die Zeit seit der letzten Spende ein entscheidender Faktor für die Vorhersage ist."),
                                                            tags$li("**AnzahlSpenden:** Diese Variable ist ebenfalls wichtig, da sie die historische Spendenhäufigkeit einer Person erfasst und somit Informationen über das zukünftige Spendenverhalten liefert."),
                                                            tags$li("**MonateErsteSpende:** Diese Variable zeigt eine geringere Wichtigkeit im Vergleich zu den anderen, könnte aber immer noch relevante Informationen über langfristiges Spendenverhalten liefern.")
                                                          ),
                                                          tags$p(
                                                            "Schlussfolgerung: Der Fokus auf die wichtigsten Variablen (z. B. 'MonateLetzteSpende' und 'AnzahlSpenden') könnte helfen, das Modell zu vereinfachen und die Performance zu verbessern. Weniger wichtige Variablen könnten ggf. entfernt oder anders behandelt werden.",
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          plotOutput("variableImportancePlot", height = "600px") # Plot für die Wichtigkeit der Variablen
                                                        ), # Ende von 3.1 Register Variable Importance UI ----
                                                        
                                                        # 3.2 Register neue Prädikatoren erstellen UI ----
                                                        tabPanel(
                                                          title = "3.2", # Registerkarte "Feature Engineering"
                                                          ## 3.2 Neue Prädikatoren erstellen UI ----
                                                          h3("3.2 Neue Prädikatoren erstellen"),
                                                          tags$p(
                                                            "In diesem Abschnitt können Sie neue Prädiktoren basierend auf bestehenden Variablen erstellen. Dies kann dazu beitragen, die Vorhersagekraft Ihres Modells zu verbessern.", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$p(
                                                            "Wählen Sie zwei Variablen und eine Operation aus, um einen neuen Prädiktor zu erstellen. Der neue Prädiktor wird dann dem Modell hinzugefügt und seine Auswirkungen auf die Modellleistung analysiert.",
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$ul(
                                                            tags$li("**Summe:** Addiert die Werte der beiden ausgewählten Variablen."),
                                                            tags$li("**Differenz:** Subtrahiert die Werte der zweiten Variablen von der ersten."),
                                                            tags$li("**Produkt:** Multipliziert die Werte der beiden Variablen."),
                                                            tags$li("**Verhältnis:** Teilt die Werte der ersten Variablen durch die zweite.")
                                                          ),
                                                          tags$p(
                                                            "Beispiel: Wenn Sie 'AnzahlSpenden' und 'MonateLetzteSpende' auswählen und die Operation 'Produkt' auswählen, wird ein neuer Prädiktor erstellt, der das Produkt der Anzahl der Spenden und der Zeit seit der letzten Spende berechnet.",
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$p(
                                                            "Hinweis: Bitte geben Sie einen aussagekräftigen Namen für den neuen Prädiktor ein, um ihn später identifizieren zu können.",
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          
                                                          fluidRow(
                                                            column(
                                                              6, # Linke Spalte für Eingabefelder
                                                              uiOutput("feature1_ui_create"),
                                                              uiOutput("feature2_ui_create"),
                                                              selectInput(
                                                                inputId = "operation_create",
                                                                label = "Wähle die Operation für den neuen Prädiktor:",
                                                                choices = c(
                                                                  "Summe" = "sum", 
                                                                  "Differenz" = "diff", 
                                                                  "Produkt" = "product", 
                                                                  "Verhältnis" = "ratio"
                                                                ),
                                                                selected = "product"
                                                              ),
                                                              textInput(
                                                                inputId = "newPredictor_create",
                                                                label = "Name des neuen Prädiktors:",
                                                                value = "NeuerPrädiktor"
                                                              ),
                                                              actionButton(
                                                                inputId = "createFeature",
                                                                label = "Neuen Prädiktor erstellen"
                                                              ),
                                                              br(), # Abstand für Lesbarkeit
                                                              textOutput("errorMessage") # Fehlermeldungen ausgeben
                                                            ),
                                                            column(
                                                              6, # Rechte Spalte für Ausgabeelemente
                                                              h4("Bestätigung"),
                                                              textOutput("predictorCreated"),
                                                              hr(),
                                                              h4("Neuer Prädiktor Zusammenfassung"),
                                                              verbatimTextOutput("newFeatureSummary"),
                                                              plotOutput("newFeaturePlot", height = "400px"),
                                                              h4("Aktualisierte Prädikatoren"),
                                                              verbatimTextOutput("updatedPredictors")
                                                            )
                                                          )
                                                          
                                                        ), # Ende von 3.2 Register neue Prädikatoren erstellen UI ----
                                                        
                                                        # 4. Register Modelerstellung und -bewertung UI ----
                                                        tabPanel(
                                                          title = "4. Modellierung und Bewertung", # Geänderter Titel für Klarheit
                                                          
                                                          ## 4.1 Modellzusammenfassung UI ----
                                                          h3("4.1 Modellzusammenfassung"),
                                                          tags$p(
                                                            "In diesem Abschnitt wird die Modellzusammenfassung des trainierten Modells bereitgestellt. 
        Die Zusammenfassung bietet einen Einblick in:",
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$ul(
                                                            tags$li(tags$b("Die ausgewählten Prädikatoren:"), 
                                                                    " Welche Variablen wurden für das Modell verwendet und wie wirken sie sich auf die Zielvariable aus?"),
                                                            tags$li(tags$b("Die geschätzten Koeffizienten:"), 
                                                                    " Diese Koeffizienten zeigen, wie stark und in welche Richtung (positiv oder negativ) jede Variable die Zielvariable beeinflusst."),
                                                            tags$li(tags$b("Die statistische Signifikanz der Koeffizienten:"), 
                                                                    " Zeigt, ob ein Prädiktor einen signifikanten Einfluss auf die Zielvariable hat. Dies wird anhand des p-Werts überprüft:"),
                                                            tags$ul(
                                                              tags$li(tags$b("p < 0.05:"), " Der Prädiktor hat einen statistisch signifikanten Einfluss."),
                                                              tags$li(tags$b("p ≥ 0.05:"), " Der Einfluss des Prädiktors ist nicht signifikant.")
                                                            ),
                                                            tags$li(tags$b("Die Modellgüte:"), 
                                                                    " Beurteilung der Anpassungsgüte durch Metriken wie:",
                                                                    tags$ul(
                                                                      tags$li(tags$b("AIC (Akaike-Informationskriterium):"), 
                                                                              " Niedrigere Werte deuten auf ein besser angepasstes Modell hin."),
                                                                      tags$li(tags$b("Null- und Residual-Devianz:"), 
                                                                              " Zeigen, wie gut das Modell die Daten erklärt.")
                                                                    )
                                                            )
                                                          ),
                                                          tags$p(
                                                            "Die Modellzusammenfassung ist wichtig, um:", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$ul(
                                                            tags$li(tags$b("Identifikation wichtiger Prädikatoren:"), 
                                                                    " Sie hilft zu erkennen, welche Variablen entscheidend sind, um die Zielvariable vorherzusagen. 
        Nicht signifikante Variablen könnten entfernt werden, um das Modell zu vereinfachen."),
                                                            tags$li(tags$b("Interpretation der Beziehungen:"), 
                                                                    " Die Koeffizienten geben Aufschluss darüber, wie sich eine Änderung in den Prädikatoren auf die Zielvariable auswirkt."),
                                                            tags$li(tags$b("Bewertung der Modellgüte:"), 
                                                                    " Die zusammenfassenden Statistiken helfen zu beurteilen, ob das Modell gut genug ist, um verlässliche Vorhersagen zu treffen.")
                                                          ),
                                                          tags$p(
                                                            "Das Modell wird auf Basis einer logistischen Regression (glm) trainiert. 
        Die Zielvariable 'SpendeMaerz2007' ist binär (Ja/Nein). 
        Die Formel wird dynamisch erstellt, basierend auf den vom Benutzer ausgewählten Prädikatoren.", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          verbatimTextOutput("modelSummary"),
                                                          
                                                          ## 4.2 Modellleistung UI ----
                                                          h3("4.2 Modellleistung"),
                                                          tags$p(
                                                            "Dieser Abschnitt präsentiert die Leistungskennzahlen des trainierten Modells. 
        Die Modellleistung wird durch Metriken gemessen, die zeigen, wie gut das Modell die Zielvariable vorhersagen kann.", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$p(
                                                            "Die folgenden Metriken werden dargestellt:", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$ul(
                                                            tags$li(tags$b("Genauigkeit (Accuracy):"), 
                                                                    " Der Anteil der korrekt vorhergesagten Beobachtungen an der Gesamtanzahl der Beobachtungen. 
        Eine hohe Genauigkeit deutet darauf hin, dass das Modell insgesamt zuverlässig vorhersagt."),
                                                            tags$li(tags$b("Präzision (Precision):"), 
                                                                    " Der Anteil der richtig positiven Vorhersagen (True Positives) an allen positiven Vorhersagen (True Positives + False Positives). 
        Präzision ist besonders wichtig, wenn die Kosten für falsche positive Vorhersagen hoch sind."),
                                                            tags$li(tags$b("Recall (Sensitivität):"), 
                                                                    " Der Anteil der richtig positiven Vorhersagen (True Positives) an allen tatsächlichen positiven Beobachtungen 
        (True Positives + False Negatives). Recall ist entscheidend, wenn es wichtig ist, alle positiven Fälle zu identifizieren.")
                                                          ),
                                                          tags$p(
                                                            "Zusätzlich wird eine Konfusionsmatrix (siehe Abschnitt 4.3) bereitgestellt, die die tatsächlichen Klassen (Ist-Werte) 
        und die vorhergesagten Klassen (Soll-Werte) gegenüberstellt.", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$p(
                                                            "Diese Kennzahlen bieten eine umfassende Analyse der Stärken und Schwächen des Modells und helfen bei der Identifikation potenzieller Verbesserungsbereiche.", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$p(
                                                            "Eine hohe Genauigkeit allein garantiert nicht, dass das Modell für alle Anwendungen geeignet ist. 
        Die Präzision und der Recall sind ebenfalls wichtig, insbesondere wenn das Modell auf einen spezifischen Anwendungsfall zugeschnitten ist.", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$ul(
                                                            tags$li(tags$b("Beispiel 1 (hohe Präzision, niedriger Recall):"), 
                                                                    " Das Modell macht kaum Fehler bei den positiven Vorhersagen, identifiziert jedoch nicht alle positiven Fälle."),
                                                            tags$li(tags$b("Beispiel 2 (niedrige Präzision, hoher Recall):"), 
                                                                    " Das Modell erkennt fast alle positiven Fälle, macht aber viele Fehler bei den positiven Vorhersagen.")
                                                          ),
                                                          tags$p(
                                                            "Diese Metriken helfen dabei, das Modell an die spezifischen Anforderungen anzupassen. 
        Zum Beispiel könnte ein Modell mit hohem Recall bevorzugt werden, wenn es darum geht, alle potenziellen Fälle zu identifizieren (z. B. in medizinischen Anwendungen).", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tableOutput("modelPerformance"),
                                                          
                                                          ## 4.3 Konfusionsmatrix UI ----
                                                          h3("4.3 Konfusionsmatrix"),
                                                          tags$p(
                                                            "Die Konfusionsmatrix gibt eine detaillierte Übersicht über die Vorhersageergebnisse des Modells. Sie vergleicht die tatsächlichen Klassen (Ist-Werte) mit den vorhergesagten Klassen (Soll-Werte).", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$p(
                                                            "Die Konfusionsmatrix ist in vier Bereiche unterteilt:", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$pre("
                           | Vorhergesagt Ja | Vorhergesagt Nein |
        Tatsächlich Ja   |      TP         |        FN         |
        Tatsächlich Nein |      FP         |        TN         |
        "),
                                                          tags$p(
                                                            "Mögliche Erkenntnisse aus der Konfusionsmatrix:", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$ul(
                                                            tags$li("Hohe Werte für TP und TN deuten darauf hin, dass das Modell zuverlässig ist."),
                                                            tags$li("Hohe Werte für FP und FN könnten auf Probleme im Modell hinweisen, z. B. eine falsche Gewichtung der Klassen."),
                                                            tags$li("Die Analyse von FP und FN hilft, die Schwächen des Modells besser zu verstehen und mögliche Verbesserungen vorzunehmen.")
                                                          ),
                                                          tags$p(
                                                            "Die Konfusionsmatrix kann auch verwendet werden, um auf ein Klassenungleichgewicht hinzuweisen. Falls eine Klasse deutlich häufiger vorkommt als die andere, könnte dies das Modell verzerren und weitere Maßnahmen wie eine Gewichtung der Klassen oder Sampling erfordern.", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$p(
                                                            "Die Konfusionsmatrix wird berechnet, indem die tatsächlichen Klassen aus den Trainingsdaten mit den vom Modell vorhergesagten Klassen verglichen werden. Dies ermöglicht eine präzise Beurteilung der Modellleistung auf den Trainingsdaten.", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          verbatimTextOutput("confusionMatrix"),
                                                          
                                                          ## 4.4 ROC-Kurve UI ----
                                                          h3("4.4 ROC-Kurve"),
                                                          tags$p(
                                                            "Die ROC-Kurve (Receiver Operating Characteristic) ist ein grafisches Werkzeug zur Beurteilung der Modellleistung. 
        Sie visualisiert den Kompromiss zwischen Sensitivität (True Positive Rate) und Spezifität (1 - False Positive Rate) bei verschiedenen Schwellenwerten.", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$p(
                                                            "Die ROC-Kurve gibt wichtige Einblicke in die Fähigkeit eines Modells, zwischen den Klassen zu unterscheiden, 
        und beantwortet die Frage, wie gut das Modell bei unterschiedlichen Entscheidungsschwellen funktioniert.", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$ul(
                                                            tags$li(tags$b("Sensitivität (True Positive Rate, TPR):"), 
                                                                    " Der Anteil der korrekt vorhergesagten positiven Fälle an allen tatsächlichen positiven Fällen."),
                                                            tags$li(tags$b("Spezifität (True Negative Rate, TNR):"), 
                                                                    " Der Anteil der korrekt vorhergesagten negativen Fälle an allen tatsächlichen negativen Fällen."),
                                                            tags$li(tags$b("False Positive Rate (FPR):"), 
                                                                    " Der Anteil der fälschlicherweise als positiv vorhergesagten Fälle an allen tatsächlichen negativen Fällen. FPR = 1 - Spezifität.")
                                                          ),
                                                          tags$p(
                                                            "Die Fläche unter der ROC-Kurve (Area Under the Curve, AUC) ist ein Maß für die Gesamtmodellgüte:", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$ul(
                                                            tags$li("Ein AUC-Wert von 1.0 bedeutet, dass das Modell perfekt zwischen den Klassen unterscheidet."),
                                                            tags$li("Ein AUC-Wert von 0.5 deutet darauf hin, dass das Modell nicht besser als ein Zufallsmodell ist."),
                                                            tags$li("Ein AUC-Wert < 0.5 bedeutet, dass das Modell schlechter als Zufall ist und möglicherweise fehlerhaft trainiert wurde.")
                                                          ),
                                                          tags$p(
                                                            "Eine ROC-Kurve, die näher an der oberen linken Ecke liegt, zeigt ein leistungsfähigeres Modell, 
        da es gleichzeitig eine hohe Sensitivität und Spezifität erreicht.", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$p(
                                                            "Beispiel für die Interpretation:", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$ul(
                                                            tags$li("Ein steiler Anstieg der Kurve zeigt an, dass das Modell die positiven Fälle bei niedriger Falsch-Positiv-Rate korrekt vorhersagt."),
                                                            tags$li("Eine flache Kurve deutet auf ein Modell hin, das Schwierigkeiten hat, zwischen positiven und negativen Klassen zu unterscheiden.")
                                                          ),
                                                          tags$p(
                                                            "Die ROC-Kurve wird aus den vorhergesagten Wahrscheinlichkeiten des Modells erstellt. Bei jeder Schwelle wird der Anteil der wahren Positiven (Sensitivität) gegen den Anteil der falschen Positiven (1 - Spezifität) geplottet.", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$p(
                                                            "Zusätzlich wird eine diagonale Linie gezeichnet (AUC = 0.5), die das Ergebnis eines Zufallsmodells darstellt. 
        Ein gutes Modell sollte oberhalb dieser Linie liegen.", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          plotOutput("rocPlot"),
                                                          
                                                        ), # Ende von 4. Register Modellierung und Bewertung UI ----
                                                        
                                                        # 5. Register Fazit UI ----
                                                        tabPanel(
                                                          title = "5. Fazit", # Titel des Registers
                                                          
                                                          ## 5.1 Modellzusammenfassung UI ----
                                                          h3("5.1 Modellzusammenfassung"),
                                                          tags$p(
                                                            "Dieser Abschnitt fasst die wichtigsten Erkenntnisse aus der Modellierung zusammen. 
        Die Analyse berücksichtigt die Genauigkeit, Präzision und Recall sowie Stärken und Schwächen des Modells.", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$ul(
                                                            tags$li("Das Modell zeigt eine gute Gesamtgenauigkeit, was auf eine zuverlässige Klassifizierung hindeutet."),
                                                            tags$li("Stärken: Hohe Präzision in der Vorhersage der Zielklasse (Spende Ja/Nein)."),
                                                            tags$li("Schwächen: Unterschiede in der Variabilität der Testdaten könnten die Generalisierungsfähigkeit des Modells beeinträchtigen.")
                                                          ),
                                                          
                                                          verbatimTextOutput("fazitModelSummary"),
                                                          
                                                          ## 5.2 Visualisierung der Modellleistung UI ----
                                                          h3("5.2 Visualisierung der Modellleistung"),
                                                          tags$p(
                                                            "Die folgenden Plots visualisieren die Leistung des Modells anhand der wichtigsten Metriken: Genauigkeit, Präzision und Recall sowie die ROC-Kurve.",
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          
                                                          fluidRow(
                                                            column(
                                                              6, 
                                                              plotOutput("fazitPerformanceMetrics") # Leistungsmessungen Plot
                                                            ),
                                                            column(
                                                              6, 
                                                              plotOutput("fazitROC") # ROC-Kurve Plot
                                                            )
                                                          ),
                                                          
                                                          ## 5.3 Handlungsempfehlungen UI ----
                                                          h3("5.3 Handlungsempfehlungen"),
                                                          tags$p(
                                                            "Basierend auf den Ergebnissen des Modells und der Datenanalyse werden die folgenden Empfehlungen ausgesprochen:", 
                                                            style = "font-size: 10pt;"
                                                          ),
                                                          tags$ul(
                                                            tags$li("Weitere Feature-Engineering-Maßnahmen könnten die Modellleistung steigern."),
                                                            tags$li("Untersuche die Verteilung der Testdaten und gleiche mögliche Unterschiede durch Datentransformationen aus."),
                                                            tags$li("Falls mehr Daten verfügbar sind, könnte eine erneute Modellierung mit größerem Trainingsdatensatz die Robustheit verbessern."),
                                                            tags$li("Überlege, ob das Modell in einem iterativen Prozess mit Feedback-Schleifen weiterentwickelt werden sollte.")
                                                          )
                                                        ) # Ende von 5. Register Fazit UI ----
                                                        
                                                        # Weitere Registerkarten können hier hinzugefügt werden
                                                        # ...
                                                        
                                           ) # Ende von tabsetPanel ----
                                ) # Ende von MainPanel ----
                 ) # Ende von SidebarLayout ----
) # Ende von fluidPage ----

# ---- Kapitel 3: Shiny-Server Funktion ----

# Definition des Server-Teils der Shiny-App
server <- function(input, output, session) { # Anfang von Server ----
  
  # Daten Laden und Vorbereiten Server ----
  
  # Reaktives Objekt zum Laden der Trainingsdaten Server ----
  train_data <- reactiveVal(NULL)
  
  observe({
    train_path <- here("bloodtrain.csv") # Pfad zur Trainingsdatei
    if (file.exists(train_path)) {
      data <- read.csv(train_path, header = TRUE, stringsAsFactors = FALSE)
      colnames(data) <- c("ID", "MonateLetzteSpende", "AnzahlSpenden", 
                          "Gesamtvolumen", "MonateErsteSpende", 
                          "SpendeMaerz2007")
      data$SpendeMaerz2007 <- factor(
        data$SpendeMaerz2007, 
        levels = c(0, 1), 
        labels = c("Nein", "Ja")
      )
      train_data(data)
    } else {
      showNotification("Trainingsdatei 'bloodtrain.csv' nicht gefunden.", type = "error")
    }
  })
  
  # Reaktives Objekt zum Laden der Testdaten Server ----
  test_data <- reactiveVal(NULL)
  
  observe({
    test_path <- here("bloodtest.csv") # Pfad zur Testdatei
    if (file.exists(test_path)) {
      data <- read.csv(test_path, header = TRUE, stringsAsFactors = FALSE)
      colnames(data) <- c("ID", "MonateLetzteSpende", "AnzahlSpenden", 
                          "Gesamtvolumen", "MonateErsteSpende")
      test_data(data)
    } else {
      showNotification("Testdatei 'bloodtest.csv' nicht gefunden.", type = "error")
    }
  })
  
  # 02. Register Prämissen Server ----
  ## Derzeit nur in UI Teil Text hinterlegt Server ----
  
  # 1. Register Datenverständnis Server ----
  
  ## 1.1 Zusammenfassung der Trainingsdaten Server ----
  output$trainSummary <- renderPrint({
    req(train_data())
    summary(train_data())
  })
  
  ## 1.1A Struktur der Trainingsdaten Server ----
  output$strTrain <- renderPrint({
    req(train_data())
    str(train_data())
  })
  
  ## 1.2 Zusammenfassung der Testdaten Server ----
  output$testSummary <- renderPrint({
    req(test_data())
    summary(test_data())
  })
  
  ## 1.2A Struktur der Testdaten Server ----
  output$strTest <- renderPrint({
    req(test_data())
    str(test_data())
  })
  
  ## 1.3 Fehlende Werte analysieren Server ----
  output$missingValues <- renderTable({
    req(train_data(), test_data())
    
    # Fehlende Werte in Trainings- und Testdaten
    train_missing <- sapply(train_data(), function(col) sum(is.na(col)))
    test_missing <- sapply(test_data(), function(col) sum(is.na(col)))
    
    # Kombinierte Übersicht der Variablen
    all_vars <- union(names(train_missing), names(test_missing))
    train_missing <- train_missing[all_vars]
    test_missing <- test_missing[all_vars]
    
    # Fehlende Variablen in Testdaten mit "x" markieren
    test_missing[is.na(test_missing)] <- "x"
    
    # Erstellung der Tabelle mit den fehlenden Werten
    data.frame(
      Variable = all_vars,
      Training = train_missing,
      Test = test_missing,
      stringsAsFactors = FALSE
    )
  })
  
  # 1.4 Tabelle Duplikate Testdaten Server ----
  output$duplikate <- renderTable({
    req(test_data())
    
    # Frequenz der IDs in der Spalte ID berechnen
    dup_ids <- test_data() %>%
      group_by(ID) %>%
      summarise(Frequenz = n()) %>%
      filter(Frequenz > 1)
    
    # Zusammenfassung der Frequenzkategorien
    summary_dups <- dup_ids %>%
      group_by(Frequenz) %>%
      summarise(AnzahlZeilen = n()) %>%
      arrange(desc(Frequenz))
    
    # Tabelle zurückgeben
    summary_dups
  }, rownames = FALSE)
  
  ## 1.5 Bereinigte Testdaten Zusammenfassung Server ----
  cleaned_test_data <- reactiveVal(NULL)
  
  observe({
    req(test_data())
    
    # Laden der Daten
    data <- test_data()
    
    # Entfernen von Duplikaten
    cleaned_data <- data %>% 
      distinct()
    
    # Entfernen von Zeilen mit fehlenden Werten
    cleaned_data <- cleaned_data %>% 
      na.omit()
    
    # Aktualisieren der bereinigten Testdaten
    cleaned_test_data(cleaned_data)
  })
  
  # Zusammenfassung der bereinigten Testdaten
  output$cleanedTestSummary <- renderPrint({
    req(cleaned_test_data())
    
    cat("Statistische Zusammenfassung der bereinigten Testdaten:\n")
    summary(cleaned_test_data())
  })
  
  # 1.5A Struktur der bereinigten Testdaten
  output$cleanedTestStr <- renderPrint({
    req(cleaned_test_data())
    cat("Struktur der bereinigten Testdaten:\n")
    str(cleaned_test_data())
  })
  
  ## 2.1 Boxplot mit Ausreißererkennung visualisierung Server ----
  # Server-Teil (Boxplot mit Ausreißererkennung):
  output$dataVisualization_outlier <- renderPlot({
    
    # Trainings- und Testdaten sicherstellen
    req(train_data(), test_data())  # Sicherstellen, dass die Daten geladen sind
    
    # Die tatsächlichen Daten aus den Eingabefunktionen holen
    train_data_df <- train_data()  # Trainingsdaten
    test_data_df <- test_data()    # Testdaten
    
    # Füge eine neue Spalte "Datensatz" hinzu, um zwischen Trainings- und Testdaten zu unterscheiden
    train_data_df$Datensatz <- "Train"
    test_data_df$Datensatz <- "Test"
    
    # Füge die Zielvariable zu den Testdaten hinzu (mit NA)
    test_data_df$SpendeMaerz2007 <- NA
    
    # Daten kombinieren
    combined_data <- bind_rows(train_data_df, test_data_df)
    
    # Daten in langes Format umwandeln
    combined_data_long <- combined_data %>%
      select(Datensatz, MonateErsteSpende, MonateLetzteSpende, AnzahlSpenden, Gesamtvolumen, SpendeMaerz2007) %>%
      pivot_longer(cols = -c(Datensatz, SpendeMaerz2007), names_to = "Variable", values_to = "Wert")
    
    # Boxplot erstellen
    ggplot(combined_data_long, aes(x = Datensatz, y = Wert, fill = SpendeMaerz2007)) +
      geom_boxplot(outlier.shape = 16, outlier.size = 2, alpha = 0.6, notch = TRUE) +  # Boxplot mit Ausreißern
      geom_jitter(aes(color = Datensatz), width = 0.2, alpha = 0.5) +  # Jitter-Punkte für bessere Sichtbarkeit
      stat_summary(fun = mean, geom = "point", shape = 18, color = "darkgreen", size = 3, show.legend = FALSE) +  # Durchschnitt anzeigen
      stat_summary(fun = mean, geom = "text", vjust = -0.5, aes(label = round(..y.., 2)), color = "darkgreen", size = 3) +  # Durchschnittswert als Text
      stat_summary(fun.data = "mean_cl_normal", geom = "errorbar", width = 0.2, color = "purple", size = 1, show.legend = FALSE) +  # Konfidenzintervall für Durchschnitt
      facet_wrap(~ Variable, scales = "free_y") +  # Facet Wrap für individuelle y-Skalierung
      theme_minimal() +
      labs(
        title = "Boxplot-Vergleich der Quantile und statistischen Kennzahlen für Trainings- und Testdatensatz",
        x = "Datensatz",
        y = "Wert"
      ) +
      scale_fill_manual(values = c("Nein" = "red", "Ja" = "green", "NA" = "gray")) +  # Farbzuweisung für Zielvariable
      scale_color_manual(values = c("Train" = "blue", "Test" = "red")) +  # Farbzuweisung für Jitter
      theme(
        axis.text.x = element_text(angle = 45, hjust = 1, size = 14),  # Drehung der x-Achsentexte und Schriftgröße
        axis.title.x = element_text(size = 16),  # Größere Achsentitel
        axis.title.y = element_text(size = 16),  # Größere Achsentitel
        axis.text.y = element_text(size = 14),  # Größere y-Achsentick-Beschriftungen
        panel.border = element_rect(color = "black", fill = NA, size = 1),  # Rahmen um jedes Panel hinzufügen
        strip.text = element_text(size = 14),  # Größere Facet-Titel
        plot.title = element_text(size = 18, face = "bold"),  # Größere Titel
        legend.position = "right"  # Legende rechts anzeigen
      )
  }, height = 900)  # Erhöhte Plot-Höhe
  
  ## 2.2 Boxplot Trainings- und Testdaten Server ----
  output$dataVisualization <- renderPlot({
    req(train_data(), test_data())  # Sicherstellen, dass beide Datensätze geladen sind
    
    # Daten abrufen
    train <- train_data()
    test <- test_data()
    
    # 'Dataset' Spalte hinzufügen zur Unterscheidung (Train vs Test)
    train$Dataset <- "Train"
    test$Dataset <- "Test"
    
    # Fehlende Spalte "SpendeMaerz2007" im Testdatensatz hinzufügen und auf NA setzen
    if (!"SpendeMaerz2007" %in% colnames(test)) {
      test$SpendeMaerz2007 <- NA
    }
    
    # Kombinieren der Trainings- und Testdaten
    combined_data <- bind_rows(train, test)
    
    # Numerische Variablen zur besseren Vergleichbarkeit auswählen
    numeric_vars <- c("MonateLetzteSpende", "AnzahlSpenden", "Gesamtvolumen", "MonateErsteSpende")
    
    # Skalierung der numerischen Variablen
    combined_data_scaled <- combined_data %>%
      mutate(across(all_of(numeric_vars), ~ scales::rescale(.x, na.rm = TRUE)))  # NA-Werte berücksichtigen
    
    # Daten in langes Format bringen für ggplot
    data_long <- combined_data_scaled %>%
      pivot_longer(
        cols = all_of(numeric_vars), 
        names_to = "Variable", 
        values_to = "Wert"
      )
    
    # Erstellung eines Dichteplots mit facet_grid zur Trennung von Train und Test
    ggplot(data_long, aes(x = Wert, fill = Dataset)) + 
      geom_density(alpha = 0.6) + 
      scale_fill_manual(values = c("Train" = "red", "Test" = "blue")) +
      theme_minimal() +
      labs(
        title = "Dichteplot der skalierten numerischen Variablen (Train vs Test)",
        x = "Skalierter Wert", 
        y = "Dichte"
      ) +
      theme(
        axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
        axis.title.x = element_text(size = 16),
        axis.title.y = element_text(size = 16),
        axis.text.y = element_text(size = 14),
        panel.border = element_rect(color = "black", fill = NA, size = 1),
        strip.text = element_text(size = 14),
        plot.title = element_text(size = 18, face = "bold"),
        legend.position = "none"
      ) +
      facet_grid(Variable ~ Dataset)  # Facet Grid nach Variablen und Datensätzen
  }, height = 900)  # Erhöhte Plot-Höhe für besseren Platz
  
  
  ## 2.3 Vergleich der Verteilungen zwischen Train und Test Server ----
  output$trainTestComparison <- renderPlot({
    req(train_data(), test_data())
    
    # Daten vorbereiten
    train <- train_data()
    test <- test_data()
    
    # 'Dataset' Spalte hinzufügen zur Unterscheidung
    train$Dataset <- "Train"
    test$Dataset <- "Test"
    
    # Fehlende Spalte "SpendeMaerz2007" im Testdatensatz hinzufügen und auf NA setzen
    if (!"SpendeMaerz2007" %in% colnames(test)) {
      test$SpendeMaerz2007 <- NA
    }
    
    # Kombinieren der Daten für den Vergleich
    combined_data <- bind_rows(
      train[, c("MonateLetzteSpende", "AnzahlSpenden", "Gesamtvolumen", "MonateErsteSpende", "Dataset")],
      test[, c("MonateLetzteSpende", "AnzahlSpenden", "Gesamtvolumen", "MonateErsteSpende", "Dataset")]
    )
    
    # Erstellung von Histogrammen für jede Variable
    p1 <- ggplot(combined_data, aes(x = MonateLetzteSpende, fill = Dataset)) + 
      geom_histogram(binwidth = 1, position = "dodge", color = "black") +
      labs(title = "Monate Letzte Spende", x = "Monate", y = "Frequenz") +
      theme_minimal() +
      scale_fill_manual(values = c("Train" = "blue", "Test" = "green")) +
      theme(
        axis.text.x = element_text(angle = 45, hjust = 1, size = 14),  # Drehung der X-Achsentexte und Schriftgröße
        axis.title.x = element_text(size = 16),  # Größere Achsentitel
        axis.title.y = element_text(size = 16),  # Größere Achsentitel
        axis.text.y = element_text(size = 14),  # Größere y-Achsentick-Beschriftungen
        plot.title = element_text(size = 18, face = "bold")  # Größerer Titel
      )
    
    p2 <- ggplot(combined_data, aes(x = AnzahlSpenden, fill = Dataset)) + 
      geom_histogram(binwidth = 1, position = "dodge", color = "black") +
      labs(title = "Anzahl Spenden", x = "Anzahl", y = "Frequenz") +
      theme_minimal() +
      scale_fill_manual(values = c("Train" = "blue", "Test" = "green")) +
      theme(
        axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
        axis.title.x = element_text(size = 16),
        axis.title.y = element_text(size = 16),
        axis.text.y = element_text(size = 14),
        plot.title = element_text(size = 18, face = "bold")
      )
    
    p3 <- ggplot(combined_data, aes(x = Gesamtvolumen, fill = Dataset)) + 
      geom_histogram(binwidth = 500, position = "dodge", color = "black") +
      labs(title = "Gesamtvolumen", x = "Volumen", y = "Frequenz") +
      theme_minimal() +
      scale_fill_manual(values = c("Train" = "blue", "Test" = "green")) +
      theme(
        axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
        axis.title.x = element_text(size = 16),
        axis.title.y = element_text(size = 16),
        axis.text.y = element_text(size = 14),
        plot.title = element_text(size = 18, face = "bold")
      )
    
    p4 <- ggplot(combined_data, aes(x = MonateErsteSpende, fill = Dataset)) + 
      geom_histogram(binwidth = 5, position = "dodge", color = "black") +
      labs(title = "Monate Erste Spende", x = "Monate", y = "Frequenz") +
      theme_minimal() +
      scale_fill_manual(values = c("Train" = "blue", "Test" = "green")) +
      theme(
        axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
        axis.title.x = element_text(size = 16),
        axis.title.y = element_text(size = 16),
        axis.text.y = element_text(size = 14),
        plot.title = element_text(size = 18, face = "bold")
      )
    
    # Balkendiagramm für die Zielvariable (nur für Trainingsdaten)
    p5 <- ggplot(train, aes(x = factor(SpendeMaerz2007), fill = "Train")) + 
      geom_bar(color = "black") +
      labs(title = "Klassenverteilung (Spende im März 2007)", x = "Klasse", y = "Frequenz") +
      theme_minimal() +
      scale_fill_manual(values = c("Train" = "blue")) +
      theme(
        axis.title.x = element_text(size = 16),
        axis.title.y = element_text(size = 16),
        axis.text.x = element_text(size = 14),
        axis.text.y = element_text(size = 14),
        plot.title = element_text(size = 18, face = "bold"),
        legend.position = "none"
      )
    
    # Kombinieren der Plots in einem Raster mit 2 Spalten
    grid.arrange(p1, p2, p3, p4, p5, ncol = 2)
  }, height = 900)  # Erhöhte Plot-Höhe
  
  
  ## 2.4 Pairs Plot Server ----
  output$pairsPlot <- renderPlot({
    req(train_data())
    
    # Numerische Variablen auswählen
    numeric_vars <- c("MonateLetzteSpende", "AnzahlSpenden", "Gesamtvolumen", "MonateErsteSpende")
    
    # Pairs Plot für numerische Variablen mit Farbe für die Zielvariable (Spende im März 2007)
    pairs(
      train_data()[, numeric_vars], 
      col = ifelse(train_data()$SpendeMaerz2007 == "Ja", "green", "red"), # Farben je nach Zielvariable
      main = "Pairs Plot der Trainingsdaten",  # Titel des Pairs Plots
      pch = 16,  # Punktstil
      cex = 1.2,  # Punktgröße
      font.main = 2,  # Fettschrift für den Titel
      font.lab = 2,  # Fettschrift für Achsenbezeichner
      cex.main = 1.8,  # Größere Schrift für Titel
      cex.axis = 1.2   # Größere Schrift für Achsenticks
    )
  }, height = 900)  # Erhöhte Plot-Höhe für Konsistenz mit anderen Plots
  
  
  ## 2.5 Korrelationsmatrix Server ----
  output$correlationPlotEnhanced <- renderPlot({
    req(train_data())
    
    # Auswahl nur der numerischen Variablen
    data <- train_data() %>% select_if(is.numeric)
    
    # Berechnung der Korrelationsmatrix
    cor_matrix <- cor(data, use = "pairwise.complete.obs")
    
    # Visualisierung der Korrelationsmatrix mit Anpassungen
    corrplot::corrplot(
      cor_matrix,
      method = "color",          # Farbliche Darstellung der Matrix
      type = "upper",            # Nur die obere Hälfte der Matrix anzeigen
      tl.col = "black",          # Farbige Achsenbeschriftungen
      tl.srt = 45,               # Drehung der Achsenbeschriftungen
      addCoef.col = "black",     # Korrelationskoeffizienten in schwarz anzeigen
      number.cex = 0.8,          # Schriftgröße für die Korrelationswerte
      title = "Korrelationsmatrix der numerischen Variablen",  # Titel hinzufügen
      cex.main = 1.8,            # Schriftgröße des Titels anpassen
      font.main = 2,             # Fettschrift für den Titel
      mar = c(0, 0, 1, 0)        # Anpassung der Ränder, um den Titel anzupassen
    )
  }, height = 900)  # Plot-Höhe auf 900px setzen für Konsistenz mit anderen Plots
  
  ## 2.6 Datenstruktur Outputgrößen Server ----
  output$dataStructurePlot <- renderTable({
    req(train_data(), test_data())
    
    # Datenstruktur ermitteln
    n_train <- nrow(train_data())       # Anzahl der Zeilen (Beobachtungen)
    p_train <- ncol(train_data()) - 2    # Anzahl der Spalten ohne ID und Zielvariable
    n_test <- nrow(test_data())
    p_test <- ncol(test_data()) - 1      # Testdaten ohne ID
    
    # Datenframe für die Visualisierung
    data_structure <- data.frame(
      Dataset = c("Train", "Test"),
      Beobachtungen = c(n_train, n_test),
      Variablen = c(p_train, p_test),
      Zielgröße = c(1, 0) # Zielvariable nur im Trainingsdatensatz
    )
    
    # Tabelle zurückgeben
    data_structure
  }, striped = TRUE, hover = TRUE, width = "100%", rownames = FALSE)
  
  # Pie Chart für die Datenstruktur (Train und Test)
  output$dataStructurePieChart <- renderPlot({
    req(train_data(), test_data())
    
    # Datenstruktur ermitteln
    n_train <- nrow(train_data())       # Anzahl der Zeilen (Beobachtungen)
    p_train <- ncol(train_data()) - 2    # Anzahl der Spalten ohne ID und Zielvariable
    n_test <- nrow(test_data())
    p_test <- ncol(test_data()) - 1      # Testdaten ohne ID
    
    # Erstellen der Komponenten für das Kreisdiagramm
    data_structure <- data.frame(
      Komponente = c("Beobachtungen", "Variablen", "Zielgröße"),
      Train = c(n_train, p_train, 1),   # Train-Daten
      Test = c(n_test, p_test, 0)       # Test-Daten
    )
    
    # Visualisierung der Datenstruktur als Pie Chart (für Train und Test)
    par(mfrow = c(1, 2))  # Beide Plots nebeneinander
    
    # Pie Chart für Trainingsdatensatz
    pie(data_structure$Train, labels = data_structure$Komponente,
        main = "Datenstruktur (Train)", col = c("skyblue", "orange", "green"))
    
    # Pie Chart für Testdatensatz
    pie(data_structure$Test, labels = data_structure$Komponente,
        main = "Datenstruktur (Test)", col = c("skyblue", "orange", "green"))
  }, height = 600)  # Angepasste Plot-Höhe
  
  
  # 3. Register Feature Engineering Server ----
  
  ## 3.1 Variable Importance Server ----
  output$variableImportancePlot <- renderPlot({
    req(trained_model())  # Sicherstellen, dass das Modell trainiert wurde
    
    # Berechnung der Variablenwichtigkeit unter Verwendung des neuesten Modells
    var_imp <- varImp(trained_model(), scale = FALSE)
    var_imp_df <- data.frame(
      Variable = rownames(var_imp), 
      Importance = var_imp$Overall
    )
    
    # Erstellung des Plots
    ggplot(var_imp_df, aes(x = reorder(Variable, Importance), y = Importance)) +
      geom_bar(stat = "identity", fill = "skyblue") +
      coord_flip() +
      labs(
        title = "Variable Importance",
        x = "Variable",
        y = "Wichtigkeit"
      ) +
      theme_minimal() +
      theme(
        plot.title = element_text(size = 18, face = "bold"),
        axis.title = element_text(size = 16),
        axis.text = element_text(size = 14),
        legend.text = element_text(size = 12)
      )
  })
  
  
  ## 3.2 Neuer Prädiktor erstellen Server ----
  # Dynamische UI für Feature-Auswahl beim Erstellen eines neuen Prädiktors
  output$feature1_ui_create <- renderUI({
    req(train_data())
    predictor_choices <- setdiff(names(train_data()), c("ID", "SpendeMaerz2007"))
    selectInput(
      inputId = "feature1_create",
      label = "Wähle die erste Spalte für den neuen Prädiktor:",
      choices = predictor_choices,
      selected = predictor_choices[1]
    )
  })
  
  output$feature2_ui_create <- renderUI({
    req(train_data())
    predictor_choices <- setdiff(names(train_data()), c("ID", "SpendeMaerz2007"))
    selectInput(
      inputId = "feature2_create",
      label = "Wähle die zweite Spalte für den neuen Prädiktor:",
      choices = predictor_choices,
      selected = predictor_choices[2]
    )
  })
  
  # Erstellen eines neuen Prädiktors
  new_feature <- eventReactive(input$createFeature, {
    req(train_data())
    req(input$feature1_create, input$feature2_create, input$operation_create, input$newPredictor_create)
    
    # Laden der Daten
    data <- train_data()
    
    # Überprüfen, ob der Prädiktorname nicht bereits existiert
    if(input$newPredictor_create %in% names(data)) {
      showNotification("Dieser Prädiktorname existiert bereits. Bitte wählen Sie einen anderen Namen.", type = "error")
      return(NULL)
    }
    
    # Überprüfen, ob die ausgewählten Features numerisch sind
    if(!is.numeric(data[[input$feature1_create]]) | !is.numeric(data[[input$feature2_create]])) {
      showNotification("Bitte wählen Sie zwei numerische Spalten aus.", type = "error")
      return(NULL)
    }
    
    # Erstellen des neuen Prädiktors basierend auf der gewählten Operation
    new_pred <- switch(input$operation_create,
                       "sum" = data[[input$feature1_create]] + data[[input$feature2_create]],
                       "diff" = data[[input$feature1_create]] - data[[input$feature2_create]],
                       "product" = data[[input$feature1_create]] * data[[input$feature2_create]],
                       "ratio" = ifelse(data[[input$feature2_create]] != 0, data[[input$feature1_create]] / data[[input$feature2_create]], NA)
    )
    
    # Hinzufügen des neuen Prädiktors zum Datensatz
    new_feature_name <- input$newPredictor_create
    data[[new_feature_name]] <- new_pred
    
    # Aktualisieren der Trainingsdaten mit dem neuen Prädiktor
    train_data(data)
    
    # Bestätigung anzeigen
    showNotification(paste("Neuer Prädiktor", new_feature_name, "erfolgreich erstellt!"), type = "message")
    
    return(new_feature_name)
  })
  
  # Bestätigung anzeigen
  output$predictorCreated <- renderText({
    req(new_feature())
    paste("Neuer Prädiktor", new_feature(), "erfolgreich erstellt!")
  })
  
  # Zusammenfassung des neuen Features anzeigen
  output$newFeatureSummary <- renderPrint({
    feature_name <- new_feature()
    req(feature_name)
    summary(train_data()[[feature_name]])
  })
  
  # Plot des neuen Features anzeigen
  output$newFeaturePlot <- renderPlot({
    feature_name <- new_feature()
    req(feature_name)
    
    ggplot(train_data(), aes_string(x = feature_name, fill = "SpendeMaerz2007")) +
      geom_histogram(
        binwidth = ifelse(
          is.numeric(train_data()[[feature_name]]), 
          (max(train_data()[[feature_name]], na.rm = TRUE) - min(train_data()[[feature_name]], na.rm = TRUE)) / 30, 
          1
        ), 
        position = "dodge", 
        color = "black"
      ) +
      labs(
        title = paste("Verteilung des neuen Prädiktors:", feature_name),
        x = feature_name,
        y = "Frequenz"
      ) +
      theme_minimal() +
      scale_fill_manual(values = c("Nein" = "red", "Ja" = "green"))
  })
  
  # Aktualisierte Prädikatoren anzeigen
  output$updatedPredictors <- renderPrint({
    feature_name <- new_feature()
    if (is.null(feature_name)) {
      # Keine neuen Features erstellt
      return("Keine neuen Prädikatoren erstellt.")
    } else {
      # Aktualisiere die ausgewählten Prädiktoren, falls gewünscht
      # Alternativ: Benutzer kann die Auswahl manuell aktualisieren
      selected_predictors <- input$predictors
      cat("Aktualisierte Prädiktoren für das Modell:\n")
      print(selected_predictors)
    }
  })
  
  # Dynamische Auswahl der Prädiktoren in der Sidebar
  output$predictors_ui <- renderUI({
    req(train_data())
    predictor_choices <- setdiff(names(train_data()), c("ID", "SpendeMaerz2007"))
    checkboxGroupInput(
      inputId = "predictors",
      label = "Wähle Prädikatoren für das Modell:",
      choices = predictor_choices,
      selected = predictor_choices
    )
  })
  
  # 4. Register Modellierung und Bewertung Server ----
  
  ## 4.1 Modellzusammenfassung Server ----
  # Definieren des trainierten Modells als reaktives Objekt
  trained_model <- eventReactive(input$trainModel, {
    req(train_data())  # Sicherstellen, dass Trainingsdaten vorhanden sind
    req(input$trainModel)  # Sicherstellen, dass der "Trainieren"-Button geklickt wurde
    req(input$predictors)  # Sicherstellen, dass Prädiktoren ausgewählt wurden
    
    # Dynamische Modellformel basierend auf den ausgewählten Prädiktoren
    formula <- as.formula(paste("SpendeMaerz2007 ~", paste(input$predictors, collapse = " + ")))
    
    # Training des logistischen Regressionsmodells
    model <- glm(formula, data = train_data(), family = binomial())
    
    # Benachrichtigung über erfolgreiches Training
    showNotification("Modell erfolgreich trainiert.", type = "message")
    
    return(model)  # Rückgabe des trainierten Modells
  })
  
  # Ausgabe der Modellzusammenfassung
  output$modelSummary <- renderPrint({
    req(trained_model())  # Sicherstellen, dass das Modell trainiert wurde
    
    # Ausgabe der Modellzusammenfassung, die alle Koeffizienten und Signifikanzen enthält
    model_summary <- summary(trained_model())
    
    cat("Erkenntnisse aus der Modellzusammenfassung:\n")
    cat("-------------------------------------------------\n")
    
    # Zeige die wichtigsten Koeffizienten an (einschließlich des neuen Prädiktors)
    coef_summary <- model_summary$coefficients
    top_predictors <- coef_summary[order(-abs(coef_summary[, "Estimate"])), , drop = FALSE]
    print(top_predictors)
    
    cat("\n2. Modellgüte (AIC): ", model_summary$aic, "\n")
    cat("-------------------------------------------------\n")
    
    cat("\n3. Weitere Modellkennzahlen:\n")
    cat("-------------------------------------------------\n")
    cat("Null Devianz: ", model_summary$null.deviance, "\n")
    cat("Residual Devianz: ", model_summary$deviance, "\n")
    cat("Anzahl der Parameter: ", length(coef_summary), "\n")
  })
  
  ## 4.2 Modellleistung Server ----
  # Definieren der Performance-Metriken als reaktiver Ausdruck
  performance <- reactive({
    req(trained_model())
    
    # Vorhersagen auf den Trainingsdaten
    prob <- predict(trained_model(), type = "response")
    pred_class <- ifelse(prob > 0.5, "Ja", "Nein")
    actual <- train_data()$SpendeMaerz2007
    
    # Erstellung der Konfusionsmatrix
    cm <- table(Predicted = pred_class, Actual = actual)
    
    # Berechnung der Metriken
    accuracy <- sum(diag(cm)) / sum(cm)
    precision <- ifelse("Ja" %in% rownames(cm) & ("Ja" %in% colnames(cm)), 
                        ifelse((cm["Ja", "Ja"] + cm["Ja", "Nein"]) == 0, NA, cm["Ja", "Ja"] / sum(cm["Ja", ])), 
                        NA)
    recall <- ifelse("Ja" %in% rownames(cm) & ("Ja" %in% colnames(cm)), 
                     ifelse((cm["Ja", "Ja"] + cm["Nein", "Ja"]) == 0, NA, cm["Ja", "Ja"] / sum(cm[, "Ja"])), 
                     NA)
    
    # Erstellung des Performance-Datenrahmens
    performance_df <- data.frame(
      Metrik = c("Genauigkeit", "Präzision", "Recall"),
      Wert = c(round(accuracy, 3), round(precision, 3), round(recall, 3)),
      stringsAsFactors = FALSE
    )
    
    return(performance_df)
  })
  
  ## 4.3 Konfusionsmatrix Server ----
  output$confusionMatrix <- renderPrint({
    req(trained_model())
    
    # Vorhersagen treffen
    prob <- predict(trained_model(), type = "response")
    pred_class <- ifelse(prob > 0.5, "Ja", "Nein")
    actual <- train_data()$SpendeMaerz2007
    
    # Konfusionsmatrix mit caret::confusionMatrix
    cm <- confusionMatrix(
      factor(pred_class, levels = c("Nein", "Ja")),
      factor(actual, levels = c("Nein", "Ja"))
    )
    return(cm)
  })
  
  ## 4.4 ROC-Kurve Server ----
  # Definieren des ROC-Objekts als reaktiver Ausdruck
  roc_obj <- reactive({
    req(trained_model())
    
    # Vorhersagen auf den Trainingsdaten
    prob <- predict(trained_model(), type = "response")
    actual <- train_data()$SpendeMaerz2007
    
    # Erstellung des ROC-Objekts mit pROC::roc
    roc_obj <- roc(
      response = actual, 
      predictor = prob, 
      levels = c("Nein", "Ja"), 
      direction = ">"
    )
    
    return(roc_obj)
  })
  
  # Ausgabe der ROC-Kurve
  output$rocPlot <- renderPlot({
    req(roc_obj())
    
    plot(
      roc_obj(), 
      col = "blue", 
      main = "ROC-Kurve des Modells", 
      legacy.axes = TRUE
    )
    abline(a = 0, b = 1, lty = 2, col = "gray")
    legend(
      "bottomright", 
      legend = paste("AUC =", round(auc(roc_obj()), 3)), 
      col = "blue", 
      lwd = 2
    )
  })
  
  # 5. Register Fazit Server ----
  ## 5.1 Modellzusammenfassung Server ----
  output$fazitModelSummary <- renderPrint({
    req(trained_model())
    
    summary <- capture.output(summary(trained_model()))
    
    cat("Erkenntnisse aus der Modellzusammenfassung:\n")
    cat("-------------------------------------------------\n")
    cat("1. Die wichtigsten Prädikatoren laut Modell:\n")
    
    # Extrahiere und zeige die wichtigsten Koeffizienten
    coef_summary <- summary(trained_model())$coefficients
    top_predictors <- coef_summary[order(-abs(coef_summary[, "Estimate"])), , drop = FALSE]
    print(top_predictors)
    
    cat("\n2. Modellgüte (AIC): ", summary(trained_model())$aic, "\n")
    cat("-------------------------------------------------\n")
  })
  
  ## 5.2 Visualisierung der Modellleistung Server ----
  output$fazitPerformanceMetrics <- renderPlot({
    req(performance())
    
    # Balkendiagramm für Leistungsmessungen
    ggplot(performance(), aes(x = Metrik, y = Wert, fill = Metrik)) +
      geom_bar(stat = "identity", color = "black", alpha = 0.8) +
      labs(
        title = "Zusammenfassung der Modellleistung",
        x = "Metrik",
        y = "Wert"
      ) +
      theme_minimal() +
      scale_fill_manual(values = c("Genauigkeit" = "blue", "Präzision" = "green", "Recall" = "orange")) +
      theme(legend.position = "none")
  })
  
  ## 5.3 Handlungsempfehlungen Server ----
  output$fazitROC <- renderPlot({
    req(roc_obj())
    
    plot(
      roc_obj(), 
      col = "darkred", 
      main = "ROC-Kurve des Modells (Fazit)", 
      legacy.axes = TRUE
    )
    abline(a = 0, b = 1, lty = 2, col = "gray")
    legend(
      "bottomright", 
      legend = paste("AUC =", round(auc(roc_obj()), 3)), 
      col = "darkred", 
      lwd = 2
    )
  })
  
} # Ende von server()

# ---- Kapitel 4: Starten der Shiny-App ----

# Starten der Shiny-App mit dem definierten UI und Server
shinyApp(ui = ui, server = server)

